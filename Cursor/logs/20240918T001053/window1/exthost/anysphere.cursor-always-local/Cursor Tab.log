2024-09-18 00:10:59.816 [info] CURSOR LOG: Finished creating provider!
2024-09-18 00:13:35.352 [info] CURSOR LOG: creating client to https://us-eu.gcpp.cursor.sh
2024-09-18 00:13:35.353 [info] CURSOR LOG: restFunc initiated dd0359b7-3b1e-4b8c-bc26-44ebe35a70aa
2024-09-18 00:13:35.967 [info] CURSOR LOG: Error in streaming cpp [canceled] This operation was aborted
2024-09-18 00:13:35.967 [info] CURSOR LOG: restFunc done dd0359b7-3b1e-4b8c-bc26-44ebe35a70aa
2024-09-18 00:13:36.325 [info] CURSOR LOG: restFunc initiated 4adacc56-0890-4b8e-af21-59ab81c8c697
2024-09-18 00:13:36.415 [info] CURSOR LOG: Error in streaming cpp [canceled] This operation was aborted
2024-09-18 00:13:36.415 [info] CURSOR LOG: restFunc done 4adacc56-0890-4b8e-af21-59ab81c8c697
2024-09-18 00:13:36.451 [info] CURSOR LOG: restFunc initiated 067be965-5285-4f6c-9b7b-1c642cb85b6e
2024-09-18 00:13:36.576 [info] CURSOR LOG: Error in streaming cpp [canceled] This operation was aborted
2024-09-18 00:13:36.576 [info] CURSOR LOG: restFunc done 067be965-5285-4f6c-9b7b-1c642cb85b6e
2024-09-18 00:13:36.611 [info] CURSOR LOG: restFunc initiated d01fc14e-dfa5-46ba-85af-780e974da7e1
2024-09-18 00:13:36.949 [info] CURSOR LOG: Done streaming cpp with id d01fc14e-dfa5-46ba-85af-780e974da7e1
2024-09-18 00:13:36.949 [info] CPP RT LOG: Time taken for streaming cpp 336.230224609375 with request d01fc14e-dfa5-46ba-85af-780e974da7e1
2024-09-18 00:13:36.950 [info] CPP Request Log with id d01fc14e-dfa5-46ba-85af-780e974da7e1
2024-09-18 00:13:36.950 [info] =======>Model input 
2024-09-18 00:13:36.950 [info] =======>Model output 
    public void viewEnrolledStudents(Scanner scanner, CourseCatalog courseCatalog) {
        viewAssignedCourses();
        System.out.print("Enter the course code to view enrolled students: ");
        String courseCode = scanner.nextLine();
2024-09-18 00:13:36.950 [info] =======>Debug stream time 146.67257200181484
2024-09-18 00:13:36.950 [info] =======>Debug ttft time 58.68587699532509
2024-09-18 00:13:36.951 [info] Average of latest 20 ttft time 58.68587699532509
2024-09-18 00:13:36.951 [info] Average of latest 20 stream time 146.67257200181484
2024-09-18 00:13:36.951 [info] Average of latest 20 total time NaN
2024-09-18 00:13:36.951 [info] Average of latest 20 client time 336.230224609375
2024-09-18 00:13:36.951 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:13:36.951 [info] CPP RT LOG: All stats {"streamingtime":336.230224609375,"actualTtftFromStart":274.708740234375,"timeTillServerRequest":50.81494140625,"requestToTtft":223.893798828125,"totalTime":387.008544921875}
2024-09-18 00:13:36.951 [info] CURSOR LOG: restFunc done d01fc14e-dfa5-46ba-85af-780e974da7e1
2024-09-18 00:13:37.003 [info] CURSOR LOG: restFunc initiated a032e828-c32e-4a3d-b0d0-2230795564a7
2024-09-18 00:13:37.249 [info] CURSOR LOG: Done streaming cpp with id a032e828-c32e-4a3d-b0d0-2230795564a7
2024-09-18 00:13:37.249 [info] CPP RT LOG: Time taken for streaming cpp 247.09912109375 with request a032e828-c32e-4a3d-b0d0-2230795564a7
2024-09-18 00:13:37.249 [info] CPP Request Log with id a032e828-c32e-4a3d-b0d0-2230795564a7
2024-09-18 00:13:37.249 [info] =======>Model input 
2024-09-18 00:13:37.249 [info] =======>Model output 
    public void viewEnrolledStudents(Scanner scanner, CourseCatalog courseCatalog) {
        viewAssignedCourses();
        System.out.print("Enter the course code to view enrolled students: ");
        String courseCode = scanner.nextLine();
2024-09-18 00:13:37.249 [info] =======>Debug stream time 73.88102199882269
2024-09-18 00:13:37.249 [info] =======>Debug ttft time 67.24048200249672
2024-09-18 00:13:37.250 [info] Average of latest 20 ttft time 62.963179498910904
2024-09-18 00:13:37.250 [info] Average of latest 20 stream time 110.27679700031877
2024-09-18 00:13:37.250 [info] Average of latest 20 total time NaN
2024-09-18 00:13:37.250 [info] Average of latest 20 client time 291.6646728515625
2024-09-18 00:13:37.250 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:13:37.250 [info] CPP RT LOG: All stats {"streamingtime":247.09912109375,"actualTtftFromStart":291.6474609375,"timeTillServerRequest":50.882080078125,"requestToTtft":240.765380859375,"totalTime":297.922119140625}
2024-09-18 00:13:37.250 [info] CURSOR LOG: restFunc done a032e828-c32e-4a3d-b0d0-2230795564a7
2024-09-18 00:19:39.364 [info] CURSOR LOG: creating client to https://us-eu.gcpp.cursor.sh
2024-09-18 00:19:39.364 [info] CURSOR LOG: restFunc initiated 3a55c439-548b-494d-890a-14b99c57f6e6
2024-09-18 00:19:40.636 [info] CURSOR LOG: Done streaming cpp with id 3a55c439-548b-494d-890a-14b99c57f6e6
2024-09-18 00:19:40.636 [info] CPP RT LOG: Time taken for streaming cpp 1271.40673828125 with request 3a55c439-548b-494d-890a-14b99c57f6e6
2024-09-18 00:19:40.636 [info] CPP Request Log with id 3a55c439-548b-494d-890a-14b99c57f6e6
2024-09-18 00:19:40.636 [info] =======>Model input 
2024-09-18 00:19:40.636 [info] =======>Model output 
        addCourse(new Course("MTH203", "Math III", 4, 3, "Satish Pandey", "MTH100", 70, "15:00-17:00"));
        addCourse(new Course("MTH210", "Discrete Structures", 4, 3, "Ashish Kumar Pandey", "MTH100", 70, "09:00-11:00"));
        addCourse(new Course("MTH211", "Number Theory", 4, 3, "Debika Banerjee", "MTH100", 70, "11:00-13:00"));
        addCourse(new Course("MTH240", "Real Analysis I", 4, 3, "Nabaneita Ray", "MTH100", 70, "14:00-16:00"));
2024-09-18 00:19:40.636 [info] =======>Debug stream time 206.18241000175476
2024-09-18 00:19:40.636 [info] =======>Debug ttft time 203.76449700444937
2024-09-18 00:19:40.636 [info] Average of latest 20 ttft time 109.89695200075705
2024-09-18 00:19:40.636 [info] Average of latest 20 stream time 142.2453346674641
2024-09-18 00:19:40.636 [info] Average of latest 20 total time NaN
2024-09-18 00:19:40.636 [info] Average of latest 20 client time 618.245361328125
2024-09-18 00:19:40.636 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:19:40.636 [info] CPP RT LOG: All stats {"streamingtime":1271.40673828125,"actualTtftFromStart":1392.404541015625,"timeTillServerRequest":121.748046875,"requestToTtft":1270.656494140625,"totalTime":1392.764892578125}
2024-09-18 00:19:40.636 [info] CURSOR LOG: restFunc done 3a55c439-548b-494d-890a-14b99c57f6e6
2024-09-18 00:26:15.446 [info] CURSOR LOG: restFunc initiated d182d527-fce3-4e2e-914c-bcc4fef5926e
2024-09-18 00:26:16.628 [info] CURSOR LOG: Done streaming cpp with id d182d527-fce3-4e2e-914c-bcc4fef5926e
2024-09-18 00:26:16.628 [info] CPP RT LOG: Time taken for streaming cpp 1181.003662109375 with request d182d527-fce3-4e2e-914c-bcc4fef5926e
2024-09-18 00:26:16.628 [info] CPP Request Log with id d182d527-fce3-4e2e-914c-bcc4fef5926e
2024-09-18 00:26:16.628 [info] =======>Model input 
2024-09-18 00:26:16.628 [info] =======>Model output 
    }
}
2024-09-18 00:26:16.628 [info] =======>Debug stream time 165.3544650003314
2024-09-18 00:26:16.628 [info] =======>Debug ttft time 156.4644309952855
2024-09-18 00:26:16.629 [info] Average of latest 20 ttft time 121.53882174938917
2024-09-18 00:26:16.629 [info] Average of latest 20 stream time 148.02261725068092
2024-09-18 00:26:16.629 [info] Average of latest 20 total time NaN
2024-09-18 00:26:16.629 [info] Average of latest 20 client time 758.9349365234375
2024-09-18 00:26:16.629 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:26:16.629 [info] CPP RT LOG: All stats {"streamingtime":1181.003662109375,"actualTtftFromStart":1224.4638671875,"timeTillServerRequest":51.507080078125,"requestToTtft":1172.956787109375,"totalTime":1232.462158203125}
2024-09-18 00:26:16.629 [info] CURSOR LOG: restFunc done d182d527-fce3-4e2e-914c-bcc4fef5926e
2024-09-18 00:26:17.435 [info] CURSOR LOG: restFunc initiated abfcd549-5802-469b-8d0c-5f4b919f4e06
2024-09-18 00:26:17.941 [info] CURSOR LOG: Done streaming cpp with id abfcd549-5802-469b-8d0c-5f4b919f4e06
2024-09-18 00:26:17.941 [info] CPP RT LOG: Time taken for streaming cpp 505.790771484375 with request abfcd549-5802-469b-8d0c-5f4b919f4e06
2024-09-18 00:26:17.941 [info] CPP Request Log with id abfcd549-5802-469b-8d0c-5f4b919f4e06
2024-09-18 00:26:17.941 [info] =======>Model input 
2024-09-18 00:26:17.941 [info] =======>Model output 
        CourseTable.printCourseTable(courseCatalog.getAllCourses());
    }
}

2024-09-18 00:26:17.941 [info] =======>Debug stream time 145.3099779933691
2024-09-18 00:26:17.941 [info] =======>Debug ttft time 142.1015859991312
2024-09-18 00:26:17.942 [info] Average of latest 20 ttft time 125.65137459933757
2024-09-18 00:26:17.942 [info] Average of latest 20 stream time 147.48008939921857
2024-09-18 00:26:17.942 [info] Average of latest 20 total time NaN
2024-09-18 00:26:17.942 [info] Average of latest 20 client time 708.306103515625
2024-09-18 00:26:17.942 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:26:17.942 [info] CPP RT LOG: All stats {"streamingtime":505.790771484375,"actualTtftFromStart":556.713134765625,"timeTillServerRequest":51.115966796875,"requestToTtft":505.59716796875,"totalTime":556.878173828125}
2024-09-18 00:26:17.942 [info] CURSOR LOG: restFunc done abfcd549-5802-469b-8d0c-5f4b919f4e06
2024-09-18 00:26:20.701 [info] CURSOR LOG: restFunc initiated 46e40622-c086-4901-b7c4-ec3c276e28a0
2024-09-18 00:26:21.173 [info] CURSOR LOG: Done streaming cpp with id 46e40622-c086-4901-b7c4-ec3c276e28a0
2024-09-18 00:26:21.173 [info] CPP RT LOG: Time taken for streaming cpp 472.530029296875 with request 46e40622-c086-4901-b7c4-ec3c276e28a0
2024-09-18 00:26:21.173 [info] CPP Request Log with id 46e40622-c086-4901-b7c4-ec3c276e28a0
2024-09-18 00:26:21.173 [info] =======>Model input 
2024-09-18 00:26:21.173 [info] =======>Model output 
        CourseTable.printCourseTable(courseCatalog.getAllCourses());
    }

    public void assignProfessorToCourse(Scanner scanner, CourseCatalog courseCatalog) {
2024-09-18 00:26:21.173 [info] =======>Debug stream time 133.9305379986763
2024-09-18 00:26:21.173 [info] =======>Debug ttft time 124.70600099861622
2024-09-18 00:26:21.174 [info] Average of latest 20 ttft time 125.49381233255069
2024-09-18 00:26:21.174 [info] Average of latest 20 stream time 145.2218308324615
2024-09-18 00:26:21.174 [info] Average of latest 20 total time NaN
2024-09-18 00:26:21.174 [info] Average of latest 20 client time 669.0100911458334
2024-09-18 00:26:21.174 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:26:21.174 [info] CPP RT LOG: All stats {"streamingtime":472.530029296875,"actualTtftFromStart":514.416015625,"timeTillServerRequest":51.94970703125,"requestToTtft":462.46630859375,"totalTime":524.393310546875}
2024-09-18 00:26:21.174 [info] CURSOR LOG: restFunc done 46e40622-c086-4901-b7c4-ec3c276e28a0
2024-09-18 00:26:32.053 [info] CURSOR LOG: restFunc initiated c4c2b0a4-efdd-4ca8-a884-5abe1814638e
2024-09-18 00:26:32.544 [info] CURSOR LOG: Done streaming cpp with id c4c2b0a4-efdd-4ca8-a884-5abe1814638e
2024-09-18 00:26:32.544 [info] CPP RT LOG: Time taken for streaming cpp 490.992919921875 with request c4c2b0a4-efdd-4ca8-a884-5abe1814638e
2024-09-18 00:26:32.545 [info] CPP Request Log with id c4c2b0a4-efdd-4ca8-a884-5abe1814638e
2024-09-18 00:26:32.545 [info] =======>Model input 
2024-09-18 00:26:32.545 [info] =======>Model output 
        CourseTable.printCourseTable(courseCatalog.getAllCourses());
    }
}

2024-09-18 00:26:32.545 [info] =======>Debug stream time 162.89432600140572
2024-09-18 00:26:32.545 [info] =======>Debug ttft time 154.35031700134277
2024-09-18 00:26:32.545 [info] Average of latest 20 ttft time 129.61617014237814
2024-09-18 00:26:32.545 [info] Average of latest 20 stream time 147.74647299945354
2024-09-18 00:26:32.545 [info] Average of latest 20 total time NaN
2024-09-18 00:26:32.545 [info] Average of latest 20 client time 643.5790666852679
2024-09-18 00:26:32.545 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:26:32.545 [info] CPP RT LOG: All stats {"streamingtime":490.992919921875,"actualTtftFromStart":533.588623046875,"timeTillServerRequest":51.532958984375,"requestToTtft":482.0556640625,"totalTime":542.46826171875}
2024-09-18 00:26:32.545 [info] CURSOR LOG: restFunc done c4c2b0a4-efdd-4ca8-a884-5abe1814638e
2024-09-18 00:26:37.243 [info] CURSOR LOG: restFunc initiated 033d1f1c-9344-4f10-875c-c6ac09a41e29
2024-09-18 00:26:37.811 [info] CURSOR LOG: Done streaming cpp with id 033d1f1c-9344-4f10-875c-c6ac09a41e29
2024-09-18 00:26:37.811 [info] CPP RT LOG: Time taken for streaming cpp 567.316162109375 with request 033d1f1c-9344-4f10-875c-c6ac09a41e29
2024-09-18 00:26:37.812 [info] CPP Request Log with id 033d1f1c-9344-4f10-875c-c6ac09a41e29
2024-09-18 00:26:37.812 [info] =======>Model input 
2024-09-18 00:26:37.812 [info] =======>Model output 
                    break;
                case 8:
                    student.viewSchedule();
                    break;
2024-09-18 00:26:37.812 [info] =======>Debug stream time 182.22293200343847
2024-09-18 00:26:37.812 [info] =======>Debug ttft time 179.1499259993434
2024-09-18 00:26:37.812 [info] Average of latest 20 ttft time 135.80788962449878
2024-09-18 00:26:37.812 [info] Average of latest 20 stream time 152.05603037495166
2024-09-18 00:26:37.812 [info] Average of latest 20 total time NaN
2024-09-18 00:26:37.812 [info] Average of latest 20 client time 634.0462036132812
2024-09-18 00:26:37.812 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:26:37.812 [info] CPP RT LOG: All stats {"streamingtime":567.316162109375,"actualTtftFromStart":627.938232421875,"timeTillServerRequest":60.946533203125,"requestToTtft":566.99169921875,"totalTime":628.244140625}
2024-09-18 00:26:37.812 [info] CURSOR LOG: restFunc done 033d1f1c-9344-4f10-875c-c6ac09a41e29
2024-09-18 00:26:44.593 [info] CURSOR LOG: restFunc initiated b614dbe8-b30a-4dd6-b531-e3d7fb87ec9f
2024-09-18 00:26:45.184 [info] CURSOR LOG: Done streaming cpp with id b614dbe8-b30a-4dd6-b531-e3d7fb87ec9f
2024-09-18 00:26:45.184 [info] CPP RT LOG: Time taken for streaming cpp 591.4130859375 with request b614dbe8-b30a-4dd6-b531-e3d7fb87ec9f
2024-09-18 00:26:45.184 [info] CPP Request Log with id b614dbe8-b30a-4dd6-b531-e3d7fb87ec9f
2024-09-18 00:26:45.184 [info] =======>Model input 
2024-09-18 00:26:45.184 [info] =======>Model output 
                case 3:
                    student.viewRegisteredCourses(courseCatalog);
                    break;
                case 4:
2024-09-18 00:26:45.184 [info] =======>Debug stream time 257.9847519993782
2024-09-18 00:26:45.184 [info] =======>Debug ttft time 213.95599300414324
2024-09-18 00:26:45.185 [info] Average of latest 20 ttft time 144.49101222223706
2024-09-18 00:26:45.185 [info] Average of latest 20 stream time 163.8258883332213
2024-09-18 00:26:45.185 [info] Average of latest 20 total time NaN
2024-09-18 00:26:45.185 [info] Average of latest 20 client time 629.3091905381945
2024-09-18 00:26:45.185 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:26:45.185 [info] CPP RT LOG: All stats {"streamingtime":591.4130859375,"actualTtftFromStart":643.85791015625,"timeTillServerRequest":52.641357421875,"requestToTtft":591.216552734375,"totalTime":644.0126953125}
2024-09-18 00:26:45.185 [info] CURSOR LOG: restFunc done b614dbe8-b30a-4dd6-b531-e3d7fb87ec9f
2024-09-18 00:26:46.533 [info] CURSOR LOG: restFunc initiated 089cb556-ab2f-48bb-93b2-4158a433b47b
2024-09-18 00:26:47.040 [info] CURSOR LOG: Done streaming cpp with id 089cb556-ab2f-48bb-93b2-4158a433b47b
2024-09-18 00:26:47.040 [info] CPP RT LOG: Time taken for streaming cpp 506.687255859375 with request 089cb556-ab2f-48bb-93b2-4158a433b47b
2024-09-18 00:26:47.045 [info] CPP Request Log with id 089cb556-ab2f-48bb-93b2-4158a433b47b
2024-09-18 00:26:47.045 [info] =======>Model input <｜begin▁of▁sentence｜>You are an intelligent programmer named CursorBot. You are an expert at coding. Your goal is to help your colleague finish a code change.

User: Help me finish a coding change. In particular, you will see a series of snippets from files I've recently viewed, the file I am editing, then a history of my recent codebase changes, then current compiler and linter errors. You will then rewrite the <code_to_rewrite>, to match what you think I would do next in the codebase. Note: I might have stopped in the middle of typing.

Here are some snippets of code I've recently looked at, roughly from oldest to newest. It's possible these aren't entirely relevant to my code change.
<recently_viewed_snippets>
<snippet>
(`CourseCatalog.java`)


import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class CourseCatalog {
    private Map<String, Course> courses;
    private Map<String, Student> students;
    private Map<String, Professor> professors;
    private List<Complaint> complaints;
    private Map<String, List<Course>> studentRegistrations;
    private Map<String, List<Course>> professorAssignments;

    public CourseCatalog() {
        this.courses = new HashMap<>();
        this.students = new HashMap<>();
        this.professors = new HashMap<>();
        this.complaints = new ArrayList<>();
        this.studentRegistrations = new HashMap<>();
        this.professorAssignments = new HashMap<>();
        initializeCourses();
    }

    private void initializeCourses() {
        // Semester 1 courses (no prerequisites)
        addCourse(new Course("MTH100", "Linear Algebra", 4, 1, "Samaresh Chatterjee (V)", null, 600, "09:00-11:00"));
        addCourse(new Course("CSE101", "Introduction to Programming", 4, 1, "B N Jain (V)", null, 600, "11:00-13:00"));
        addCourse(new Course("DES102", "Introduction to HCI", 4, 1, "Rajiv Ratn Shah", null, 600, "14:00-16:00"));
        addCourse(new Course("ECE111", "Digital Circuits", 4, 1, "Pravesh Biyani", null, 600, "16:00-18:00"));
        addCourse(new Course("COM101", "Communication Skills", 2, 1, "Payel C Mukherjee (V)", null, 600, "09:00-11:00"));

        // Semester 2 courses (no prerequisites)
        addCourse(new Course("BIO101", "Foundations of Biology", 4, 2, "Sriram K.", null, 300, "09:00-11:00"));
        addCourse(new Course("CSE102", "Data Structures and Algorithms", 4, 2, "Ojaswa Sharma", "CSE101", 300, "11:00-13:00"));
        addCourse(new Course("CSE112", "Computer Organisation", 4, 2, "Sujay Deb", null, 300, "14:00-16:00"));
        addCourse(new Course("CSE140", "Introduction to Intelligent Systems", 4, 2, "Jainendra Shukla", "CSE101", 300, "16:00-18:00"));
        addCourse(new Course("DES101", "Design Drawing and Visualization", 4, 2, "Anoop Ratn (V)", null, 300, "09:00-12:00"));
        addCourse(new Course("DES202", "Visual Design & Communication", 4, 2, "Anoop Ratn (V)", null, 300, "13:00-15:00"));
        addCourse(new Course("ECE113", "Basic Electronics", 4, 2, "Tammam Tillo", null, 300, "15:00-17:00"));
        addCourse(new Course("MTH201", "Probability and Statistics", 4, 2, "Subhajit Ghosechowdhury", null, 300, "09:00-11:00"));
        addCourse(new Course("SOC101", "Introduction to Sociology and Anthropology", 4, 2, "Deepak Prince", null, 300, "11:00-13:00"));
        addCourse(new Course("SSH101", "Critical Thinking and Readings in Social Sciences", 4, 2, "Aasim Khan", null, 300, "14:00-16:00"));
        addCourse(new Course("SSH101 (Priyadarshi)", "Critical Thinking and Readings in Social Sciences", 4, 2, "Priyadarshi", null, 300, "16:00-18:00"));
        addCourse(new Course("ECO223", "Money and Banking", 4, 2, "Kiriti Kanjilal", null, 300, "09:00-11:00"));

        // Semester 3 courses (some with prerequisites)
        addCourse(new Course("BIO211", "Cell Biology and Biochemistry", 4, 3, "Jaspreet Kaur", "BIO101", 70, "09:00-11:00"));
        addCourse(new Course("BIO214", "Genetics and Molecular Biology", 4, 3, "Gaurav Ahuja", "BIO101", 70, "11:00-13:00"));
</snippet>
<snippet>
(`Professor.java`)


            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    viewAssignedCourses();
                    break;
                case 2:
                    updateCourseDetails(scanner, courseCatalog);
                    break;
                case 3:
                    return;
                default:
                    System.out.println("Invalid selection. Please try again.");
            }
        }
    }

    public void loadAssignedCourses(CourseCatalog courseCatalog) {
        this.assignedCourses = courseCatalog.getCoursesForProfessor(this.getId());
    }

    private void viewAssignedCourses() {
        System.out.println("Assigned Courses:");
        if (assignedCourses.isEmpty()) {
            System.out.println("No courses assigned.");
        } else {
            CourseTable.printCourseTable(assignedCourses);
        }
    }

    private void updateCourseDetails(Scanner scanner, CourseCatalog courseCatalog) {
        viewAssignedCourses(); // Remove the courseCatalog argument here
        System.out.print("Enter the course code to update: ");
        String courseCode = scanner.nextLine();
        
        Course course = assignedCourses.stream()
                .filter(c -> c.getCode().equals(courseCode))
                .findFirst()
                .orElse(null);

        if (course == null) {
            System.out.println("Invalid course code or you are not assigned to this course.");
            return;
        }

        while (true) {
            System.out.println("1. Update Syllabus");
</snippet>
<snippet>
(`Student.java`)


import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.HashMap;

public class Student extends User {
    private List<Course> registeredCourses;
    private List<Course> completedCourses;
    private List<Complaint> complaints;
    private int totalCredits;
    private int currentSemester;
    private String branch;
    private double cgpa;

    public Student(String name, String email, String id, String branch) {
        super(name, email, id);
        this.registeredCourses = new ArrayList<>();
        this.completedCourses = new ArrayList<>();
        this.complaints = new ArrayList<>();
        this.totalCredits = 0;
        this.branch = branch;
        this.currentSemester = 1;
    }

    public void viewAvailableCourses(CourseCatalog courseCatalog) {
        List<Course> availableCourses = courseCatalog.getCoursesForSemester(currentSemester);
        System.out.println("#=---- Available Courses ----=#");
        CourseTable.printCourseTable(availableCourses);
    }

    public void registerForCourse(Scanner scanner, CourseCatalog courseCatalog) {
        viewAvailableCourses(courseCatalog);
        System.out.print("Enter the course code to register: ");
        String courseCode = scanner.nextLine();
        Course course = courseCatalog.getCourse(courseCode);
        
        if (course == null) {
            System.out.println("Invalid course code.");
            return;
        }

        if (course.getSemester() != currentSemester) {
            System.out.println("This course is not available for your current semester.");
            return;
        }
        if (!meetsPrerequisites(course)) {
            System.out.println("You don't meet the prerequisites for this course.");
            return;
</snippet>
</recently_viewed_snippets>


Here is the file that I'm looking at (`Admin.java`):
<file>
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;

public class Admin extends User {
    public Admin(String name, String email, String id) {
        super(name, email, id);
    }

    public void manageCourses(Scanner scanner, CourseCatalog courseCatalog) {
        while (true) {
            System.out.println("1. View Course Catalog");
            System.out.println("2. Add Course");
            System.out.println("3. Delete Course");
            System.out.println("4. Back to Main Menu");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    courseCatalog.viewCourses();
                    break;
                case 2:
                    addCourse(scanner, courseCatalog);
                    break;
                case 3:
                    deleteCourse(scanner, courseCatalog);
                    break;
                case 4:
                    return;
                default:
                    System.out.println("Invalid selection. Please try again.");
            }
        }
    }

    private void addCourse(Scanner scanner, CourseCatalog courseCatalog) {
        System.out.print("Enter course code: ");
        String code = scanner.nextLine();
        System.out.print("Enter course title: ");
        String title = scanner.nextLine();
        System.out.print("Enter credits: ");
        int credits = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter semester: ");
        int semester = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        Course newCourse = new Course(code, title, credits, semester, "", null, 0, "");
        courseCatalog.addCourse(newCourse);
        System.out.println("Course added successfully.");
    }

    private void deleteCourse(Scanner scanner, CourseCatalog courseCatalog) {
        System.out.print("Enter course code to delete: ");
        String code = scanner.nextLine();
        if (courseCatalog.removeCourse(code)) {
            System.out.println("Course deleted successfully.");
        } else {
            System.out.println("Course not found.");
        }
    }

    public void manageStudentRecords(Scanner scanner, CourseCatalog courseCatalog) {
        while (true) {
            System.out.println("1. View Student Records");
            System.out.println("2. Update Student Grades");
            System.out.println("3. Update Student Personal Information");
            System.out.println("4. Back to Main Menu");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    viewStudentRecords(courseCatalog);
                    break;
                case 2:
                    updateStudentGrades(scanner, courseCatalog);
                    break;
                case 3:
                    updateStudentPersonalInfo(scanner, courseCatalog);
                    break;
                case 4:
                    return;
                default:
                    System.out.println("Invalid selection. Please try again.");
            }
        }
    }

    private void viewStudentRecords(CourseCatalog courseCatalog) {
        List<Student> students = courseCatalog.getAllStudents();
        for (Student student : students) {
            System.out.println("Name: " + student.getName());
            System.out.println("ID: " + student.getId());
            System.out.println("Email: " + student.getEmail());
            System.out.println("Completed Courses:");
            student.viewCompletedCourses();
            System.out.println("--------------------");
        }
    }

    private void updateStudentGrades(Scanner scanner, CourseCatalog courseCatalog) {
        System.out.print("Enter student ID: ");
        String studentId = scanner.nextLine();
        Student student = courseCatalog.getStudent(studentId);

        if (student == null) {
            System.out.println("Student not found.");
            return;
        }

        System.out.print("Enter course code: ");
        String courseCode = scanner.nextLine();
        Course course = courseCatalog.getCourse(courseCode);

        if (course == null) {
            System.out.println("Course not found.");
            return;
        }

        System.out.print("Enter grade (A/B/C/D/F): ");
        String grade = scanner.nextLine().toUpperCase();

        if (!grade.matches("[A-DF]")) {
            System.out.println("Invalid grade.");
            return;
        }

        student.updateGrade(course, grade);
        System.out.println("Grade updated successfully.");
    }

    private void updateStudentPersonalInfo(Scanner scanner, CourseCatalog courseCatalog) {
        System.out.print("Enter student ID: ");
        String studentId = scanner.nextLine();
        Student student = courseCatalog.getStudent(studentId);

        if (student == null) {
            System.out.println("Student not found.");
            return;
        }

        System.out.print("Enter new email (or press enter to skip): ");
        String newEmail = scanner.nextLine();
        if (!newEmail.isEmpty()) {
            student.setEmail(newEmail);
        }

        // Add more fields as needed

        System.out.println("Student information updated successfully.");
    }

    public void assignProfessorsToCourses(Scanner scanner, CourseCatalog courseCatalog) {
        courseCatalog.viewCourses();
        System.out.print("Enter course code to assign professor: ");
        String courseCode = scanner.nextLine();
        Course course = courseCatalog.getCourse(courseCode);

        if (course == null) {
            System.out.println("Course not found.");
            return;
        }

        List<Professor> professors = courseCatalog.getAllProfessors();
        System.out.println("Available Professors:");
        for (int i = 0; i < professors.size(); i++) {
            System.out.println((i + 1) + ". " + professors.get(i).getName());
        }

        System.out.print("Enter the number of the professor to assign: ");
        int professorIndex = scanner.nextInt() - 1;
        scanner.nextLine(); // Consume newline

        if (professorIndex < 0 || professorIndex >= professors.size()) {
            System.out.println("Invalid professor selection.");
            return;
        }

        Professor selectedProfessor = professors.get(professorIndex);
        course.assignProfessor(selectedProfessor);
        System.out.println("Professor " + selectedProfessor.getName() + " assigned to " + course.getTitle());
    }

    public void handleComplaints(Scanner scanner, CourseCatalog courseCatalog) {
        List<Complaint> complaints = courseCatalog.getAllComplaints();

        while (true) {
            System.out.println("1. View All Complaints");
            System.out.println("2. Update Complaint Status");
            System.out.println("3. Filter Complaints");
            System.out.println("4. Back to Main Menu");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    viewAllComplaints(complaints);
                    break;
                case 2:
                    updateComplaintStatus(scanner, complaints);
                    break;
                case 3:
                    filterComplaints(scanner, complaints);
                    break;
                case 4:
                    return;
                default:
                    System.out.println("Invalid selection. Please try again.");
            }
        }
    }

    private void viewAllComplaints(List<Complaint> complaints) {
        for (int i = 0; i < complaints.size(); i++) {
            System.out.println((i + 1) + ". " + complaints.get(i));
        }
    }
    public void updateCourseDetails(Scanner scanner, CourseCatalog courseCatalog) {
        System.out.print("Enter course code to update: ");
        String courseCode = scanner.nextLine();
        Course course = courseCatalog.getCourse(courseCode);

        if (course == null) {
            System.out.println("Course not found.");
            return;
        }

        System.out.println("Current course details:");
        System.out.println(course);

        System.out.print("Enter new title (or press enter to skip): ");
        String newTitle = scanner.nextLine();
        if (!newTitle.isEmpty()) {
            course.setTitle(newTitle);
        }

        System.out.print("Enter new credits (or press enter to skip): ");
        String newCreditsStr = scanner.nextLine();
        if (!newCreditsStr.isEmpty()) {
            try {
                int newCredits = Integer.parseInt(newCreditsStr);
                course.setCredits(newCredits);
            } catch (NumberFormatException e) {
                System.out.println("Invalid credits value. Skipping credits update.");
            }
        }

        System.out.print("Enter new semester (or press enter to skip): ");
        String newSemesterStr = scanner.nextLine();
        if (!newSemesterStr.isEmpty()) {
            try {
                int newSemester = Integer.parseInt(newSemesterStr);
                course.setSemester(newSemester);
            } catch (NumberFormatException e) {
                System.out.println("Invalid semester value. Skipping semester update.");
            }
        }

        // Add more fields to update as needed

        courseCatalog.updateCourse(course);
        System.out.println("Course details updated successfully.");
    }

    private void updateComplaintStatus(Scanner scanner, List<Complaint> complaints) {
        viewAllComplaints(complaints);
        System.out.print("Enter the number of the complaint to update: ");
        int complaintIndex = scanner.nextInt() - 1;
        scanner.nextLine(); // Consume newline

        if (complaintIndex < 0 || complaintIndex >= complaints.size()) {
            System.out.println("Invalid complaint selection.");
            return;
        }

        Complaint complaint = complaints.get(complaintIndex);
        System.out.print("Enter new status (Pending/Resolved): ");
        String newStatus = scanner.nextLine().toUpperCase();

        if (!newStatus.equals("PENDING") && !newStatus.equals("RESOLVED")) {
            System.out.println("Invalid status.");
            return;
        }

        complaint.setStatus(newStatus);
        System.out.println("Complaint status updated successfully.");
    }

    private void filterComplaints(Scanner scanner, List<Complaint> complaints) {
        System.out.println("1. Filter by Status");
        System.out.println("2. Filter by Date");
        System.out.print("Enter your choice: ");
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        switch (choice) {
            case 1:
                filterComplaintsByStatus(scanner, complaints);
                break;
            case 2:
                filterComplaintsByDate(scanner, complaints);
                break;
            default:
<<<AREA_AROUND_CODE_TO_REWRITE_WILL_BE_INSERTED_HERE>>>
                System.out.println(complaint);
            }
        }
    }

    @Override
    public boolean logout() {
        System.out.println("#=---- Logging Out ----=#");
        return true;
    }

    public void viewCourses(CourseCatalog courseCatalog) {
        System.out.println("#=---- Course Catalog ----=#");
        CourseTable.printCourseTable(courseCatalog.getAllCourses());
    }
}
</file>

Here are some snippets of code I just looked at:
<recently_viewed_snippets>
<snippet>
(`Main.java`)


            System.out.println("6. Track Progress");
            System.out.println("7. Submit Complaint");
            System.out.println("8. View Schedule");
            System.out.println("9. Logout");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    student.viewAvailableCourses(courseCatalog);
                    break;
                case 2:
                    student.registerForCourse(scanner, courseCatalog);
                    break;
                case 3:
                    student.viewRegisteredCourses();
                    break;
                case 4:
                    student.viewCompletedCourses();
                    break;
                case 5:
                    student.dropCourse(scanner);
                    break;
                case 6:
                    student.trackProgress();
                    break;
                case 7:
                    student.submitComplaint(scanner);
                    break;
                case 8:
                    student.viewSchedule();
                    break;
                case 9:
                    student.logout();
                    return;
                default:
                    System.out.println("Invalid selection. Please try again.");
            }
        }
    }

    private static void handleProfessorMenu(Credentials credentials, String id, CourseCatalog courseCatalog) {
        List<String> profcreds = credentials.getprofcreds(id);
        Professor professor = new Professor(profcreds.get(0), profcreds.get(1), profcreds.get(2));
        professor.loadAssignedCourses(courseCatalog);
        System.out.println("Hello " + "\u001B[32m" + profcreds.get(0) + "\u001B[0m");

</snippet>
</recently_viewed_snippets>

Here is my recent series of edits from oldest to newest.
<diff_history>
Professor.java
105-|        viewAssignedCourses(courseCatalog);
105+|        viewAssignedCourses();
</diff_history>



<area_around_code_to_rewrite>
                System.out.println("Invalid selection.");
        }
    }

    private void filterComplaintsByStatus(Scanner scanner, List<Complaint> complaints) {
        System.out.print("Enter status to filter (Pending/Resolved): ");
        String status = scanner.nextLine().toUpperCase();

        for (Complaint complaint : complaints) {
            if (complaint.getStatus().equals(status)) {
                System.out.println(complaint);
            }

<code_to_rewrite>
        }
    }

    private void filterComplaintsByDate(Scanner scanner, List<Complaint> complaints) {
</code_to_rewrite>
        System.out.print("Enter date to filter (YYYY-MM-DD): ");
        String date = scanner.nextLine();

        for (Complaint complaint : complaints) {
            if (complaint.getDate().equals(date)) {

</area_around_code_to_rewrite>


<diff_history>
Admin.java
345-|
346-|    public void assignProfessorToCourse(Scanner scanner, CourseCatalog courseCatalog) {
347-|        System.out.print("Enter course code: ");
348-|        String courseCode = scanner.nextLine();
349-|        Course course = courseCatalog.getCourse(courseCode);
350-|
351-|        if (course == null) {
352-|            System.out.println("Course not found.");
353-|            return;
354-|        }
355-|
356-|        List<Professor> professors = courseCatalog.getAllProfessors();
357-|        for (int i = 0; i < professors.size(); i++) {
358-|            System.out.println((i + 1) + ". " + professors.get(i).getName());
359-|        }
360-|
361-|        System.out.print("Select a professor (enter number): ");
362-|        int professorIndex = scanner.nextInt() - 1;
363-|        scanner.nextLine(); // Consume newline
364-|
365-|        if (professorIndex < 0 || professorIndex >= professors.size()) {
366-|            System.out.println("Invalid professor selection.");
367-|            return;
368-|        }
369-|
370-|        Professor selectedProfessor = professors.get(professorIndex);
371-|        courseCatalog.assignProfessorToCourse(courseCode, selectedProfessor);
372-|        System.out.println("Professor " + selectedProfessor.getName() + " assigned to " + course.getTitle());
373-|    }
</diff_history>

Now, continue where I left off and finish my change by rewriting "code_to_rewrite":




Assistant: 
2024-09-18 00:26:47.045 [info] =======>Model output 
        }
    }

    private void filterComplaintsByDate(Scanner scanner, List<Complaint> complaints) {
2024-09-18 00:26:47.045 [info] =======>Debug stream time 177.29377700388432
2024-09-18 00:26:47.045 [info] =======>Debug ttft time 125.24649700522423
2024-09-18 00:26:47.046 [info] Average of latest 20 ttft time 142.56656070053577
2024-09-18 00:26:47.046 [info] Average of latest 20 stream time 165.17267720028758
2024-09-18 00:26:47.046 [info] Average of latest 20 total time NaN
2024-09-18 00:26:47.046 [info] Average of latest 20 client time 617.0469970703125
2024-09-18 00:26:47.046 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:26:47.046 [info] CPP RT LOG: All stats {"streamingtime":506.687255859375,"actualTtftFromStart":509.95068359375,"timeTillServerRequest":53.55126953125,"requestToTtft":456.3994140625,"totalTime":560.1796875}
2024-09-18 00:26:47.046 [info] CURSOR LOG: restFunc done 089cb556-ab2f-48bb-93b2-4158a433b47b
2024-09-18 00:26:53.964 [info] CURSOR LOG: restFunc initiated b18a858e-3193-4714-a6c4-dfe1f58f7057
2024-09-18 00:26:54.431 [info] CURSOR LOG: Done streaming cpp with id b18a858e-3193-4714-a6c4-dfe1f58f7057
2024-09-18 00:26:54.431 [info] CPP RT LOG: Time taken for streaming cpp 465.382568359375 with request b18a858e-3193-4714-a6c4-dfe1f58f7057
2024-09-18 00:26:54.432 [info] CPP Request Log with id b18a858e-3193-4714-a6c4-dfe1f58f7057
2024-09-18 00:26:54.432 [info] =======>Model input 
2024-09-18 00:26:54.432 [info] =======>Model output 
                case 3:
                    student.viewRegisteredCourses(courseCatalog);
                    break;
                case 4:
2024-09-18 00:26:54.432 [info] =======>Debug stream time 146.3645199984312
2024-09-18 00:26:54.432 [info] =======>Debug ttft time 97.15337800234556
2024-09-18 00:26:54.432 [info] Average of latest 20 ttft time 138.43808954615486
2024-09-18 00:26:54.432 [info] Average of latest 20 stream time 163.46284472739154
2024-09-18 00:26:54.432 [info] Average of latest 20 total time NaN
2024-09-18 00:26:54.432 [info] Average of latest 20 client time 603.2593217329545
2024-09-18 00:26:54.432 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:26:54.432 [info] CPP RT LOG: All stats {"streamingtime":465.382568359375,"actualTtftFromStart":475.901123046875,"timeTillServerRequest":58.971435546875,"requestToTtft":416.9296875,"totalTime":524.33447265625}
2024-09-18 00:26:54.432 [info] CURSOR LOG: restFunc done b18a858e-3193-4714-a6c4-dfe1f58f7057
2024-09-18 00:26:55.089 [info] CURSOR LOG: restFunc initiated aa667b5e-0dc2-4cdc-84dd-e2d1060c1e20
2024-09-18 00:26:55.516 [info] CURSOR LOG: Done streaming cpp with id aa667b5e-0dc2-4cdc-84dd-e2d1060c1e20
2024-09-18 00:26:55.516 [info] CPP RT LOG: Time taken for streaming cpp 426.814208984375 with request aa667b5e-0dc2-4cdc-84dd-e2d1060c1e20
2024-09-18 00:26:55.517 [info] CPP Request Log with id aa667b5e-0dc2-4cdc-84dd-e2d1060c1e20
2024-09-18 00:26:55.517 [info] =======>Model input 
2024-09-18 00:26:55.517 [info] =======>Model output 
                    break;
                case 3:
                    student.viewRegisteredCourses();
                    break;
2024-09-18 00:26:55.517 [info] =======>Debug stream time 97.91905000060797
2024-09-18 00:26:55.517 [info] =======>Debug ttft time 88.99558000266552
2024-09-18 00:26:55.517 [info] Average of latest 20 ttft time 134.31788041753074
2024-09-18 00:26:55.517 [info] Average of latest 20 stream time 158.0008618334929
2024-09-18 00:26:55.517 [info] Average of latest 20 total time NaN
2024-09-18 00:26:55.517 [info] Average of latest 20 client time 588.5555623372396
2024-09-18 00:26:55.517 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:26:55.517 [info] CPP RT LOG: All stats {"streamingtime":426.814208984375,"actualTtftFromStart":468.52734375,"timeTillServerRequest":50.80224609375,"requestToTtft":417.72509765625,"totalTime":477.595947265625}
2024-09-18 00:26:55.517 [info] CURSOR LOG: restFunc done aa667b5e-0dc2-4cdc-84dd-e2d1060c1e20
2024-09-18 00:27:00.939 [info] CURSOR LOG: restFunc initiated b68aa569-0ffd-443f-a35a-9665be135156
2024-09-18 00:27:01.403 [info] CURSOR LOG: Done streaming cpp with id b68aa569-0ffd-443f-a35a-9665be135156
2024-09-18 00:27:01.403 [info] CPP RT LOG: Time taken for streaming cpp 463.557373046875 with request b68aa569-0ffd-443f-a35a-9665be135156
2024-09-18 00:27:01.403 [info] CPP Request Log with id b68aa569-0ffd-443f-a35a-9665be135156
2024-09-18 00:27:01.403 [info] =======>Model input 
2024-09-18 00:27:01.403 [info] =======>Model output 
                    break;
                case 3:
                    student.viewRegisteredCourses();
                    break;
2024-09-18 00:27:01.403 [info] =======>Debug stream time 101.17655599862337
2024-09-18 00:27:01.403 [info] =======>Debug ttft time 94.28233200311661
2024-09-18 00:27:01.409 [info] Average of latest 20 ttft time 131.2382228471912
2024-09-18 00:27:01.409 [info] Average of latest 20 stream time 153.6297613846568
2024-09-18 00:27:01.409 [info] Average of latest 20 total time NaN
2024-09-18 00:27:01.409 [info] Average of latest 20 client time 578.9403170072115
2024-09-18 00:27:01.409 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:27:01.409 [info] CPP RT LOG: All stats {"streamingtime":463.557373046875,"actualTtftFromStart":512.91796875,"timeTillServerRequest":51.140869140625,"requestToTtft":461.777099609375,"totalTime":514.6826171875}
2024-09-18 00:27:01.409 [info] CURSOR LOG: restFunc done b68aa569-0ffd-443f-a35a-9665be135156
2024-09-18 00:27:03.038 [info] CURSOR LOG: restFunc initiated 7ca7a572-f463-48ee-ae67-fbd1618815b6
2024-09-18 00:27:03.474 [info] CURSOR LOG: Done streaming cpp with id 7ca7a572-f463-48ee-ae67-fbd1618815b6
2024-09-18 00:27:03.474 [info] CPP RT LOG: Time taken for streaming cpp 435.005859375 with request 7ca7a572-f463-48ee-ae67-fbd1618815b6
2024-09-18 00:27:03.474 [info] CPP Request Log with id 7ca7a572-f463-48ee-ae67-fbd1618815b6
2024-09-18 00:27:03.474 [info] =======>Model input 
2024-09-18 00:27:03.474 [info] =======>Model output 
        professor.loadAssignedCourses(courseCatalog);  // Make sure this line is present
        System.out.println("Hello " + "\u001B[32m" + profcreds.get(0) + "\u001B[0m");

        while (true) {
2024-09-18 00:27:03.474 [info] =======>Debug stream time 113.29711099714041
2024-09-18 00:27:03.474 [info] =======>Debug ttft time 106.87171600013971
2024-09-18 00:27:03.475 [info] Average of latest 20 ttft time 129.4977580724018
2024-09-18 00:27:03.475 [info] Average of latest 20 stream time 150.7488577855485
2024-09-18 00:27:03.475 [info] Average of latest 20 total time NaN
2024-09-18 00:27:03.475 [info] Average of latest 20 client time 568.6592843191964
2024-09-18 00:27:03.475 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:27:03.475 [info] CPP RT LOG: All stats {"streamingtime":435.005859375,"actualTtftFromStart":481.943359375,"timeTillServerRequest":51.16845703125,"requestToTtft":430.77490234375,"totalTime":486.157470703125}
2024-09-18 00:27:03.475 [info] CURSOR LOG: restFunc done 7ca7a572-f463-48ee-ae67-fbd1618815b6
2024-09-18 00:27:03.811 [info] CURSOR LOG: restFunc initiated c9013941-0c8a-4f3b-b11b-22a941f9a44d
2024-09-18 00:27:05.265 [info] CURSOR LOG: Done streaming cpp with id c9013941-0c8a-4f3b-b11b-22a941f9a44d
2024-09-18 00:27:05.265 [info] CPP RT LOG: Time taken for streaming cpp 1455.158203125 with request c9013941-0c8a-4f3b-b11b-22a941f9a44d
2024-09-18 00:27:05.265 [info] CPP Request Log with id c9013941-0c8a-4f3b-b11b-22a941f9a44d
2024-09-18 00:27:05.265 [info] =======>Model input 
2024-09-18 00:27:05.265 [info] =======>Model output 
        professor.loadAssignedCourses(courseCatalog);  // Make sure this line is present
        System.out.println("Hello " + "\u001B[32m" + profcreds.get(0) + "\u001B[0m");

        while (true) {
2024-09-18 00:27:05.265 [info] =======>Debug stream time 138.94258700311184
2024-09-18 00:27:05.265 [info] =======>Debug ttft time 126.7003649994731
2024-09-18 00:27:05.273 [info] Average of latest 20 ttft time 129.3112652008732
2024-09-18 00:27:05.273 [info] Average of latest 20 stream time 149.96177306671936
2024-09-18 00:27:05.273 [info] Average of latest 20 total time NaN
2024-09-18 00:27:05.273 [info] Average of latest 20 client time 627.7592122395833
2024-09-18 00:27:05.273 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:27:05.273 [info] CPP RT LOG: All stats {"streamingtime":1455.158203125,"actualTtftFromStart":1494.12646484375,"timeTillServerRequest":52.1923828125,"requestToTtft":1441.93408203125,"totalTime":1507.300048828125}
2024-09-18 00:27:05.273 [info] CURSOR LOG: restFunc done c9013941-0c8a-4f3b-b11b-22a941f9a44d
2024-09-18 00:27:08.159 [info] CURSOR LOG: restFunc initiated f3ad8557-fd9d-4a79-b85c-ef68840cf0c2
2024-09-18 00:27:08.776 [info] CURSOR LOG: Done streaming cpp with id f3ad8557-fd9d-4a79-b85c-ef68840cf0c2
2024-09-18 00:27:08.776 [info] CPP RT LOG: Time taken for streaming cpp 615.839111328125 with request f3ad8557-fd9d-4a79-b85c-ef68840cf0c2
2024-09-18 00:27:08.776 [info] CPP Request Log with id f3ad8557-fd9d-4a79-b85c-ef68840cf0c2
2024-09-18 00:27:08.776 [info] =======>Model input 
2024-09-18 00:27:08.776 [info] =======>Model output 
        addCourse(new Course("MTH203", "Math III", 4, 3, "Satish Pandey", "MTH100", 70, "15:00-17:00"));
        addCourse(new Course("MTH210", "Discrete Structures", 4, 3, "Ashish Kumar Pandey", "MTH100", 70, "09:00-11:00"));
        addCourse(new Course("MTH211", "Number Theory", 4, 3, "Debika Banerjee", "MTH100", 70, "11:00-13:00"));
        addCourse(new Course("MTH240", "Real Analysis I", 4, 3, "Nabaneita Ray", "MTH100", 70, "14:00-16:00"));
2024-09-18 00:27:08.776 [info] =======>Debug stream time 218.14825899899006
2024-09-18 00:27:08.776 [info] =======>Debug ttft time 210.06765700131655
2024-09-18 00:27:08.777 [info] Average of latest 20 ttft time 134.35853968840092
2024-09-18 00:27:08.777 [info] Average of latest 20 stream time 154.2234284374863
2024-09-18 00:27:08.777 [info] Average of latest 20 total time NaN
2024-09-18 00:27:08.777 [info] Average of latest 20 client time 627.0142059326172
2024-09-18 00:27:08.777 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:27:08.777 [info] CPP RT LOG: All stats {"streamingtime":615.839111328125,"actualTtftFromStart":675.46240234375,"timeTillServerRequest":59.89990234375,"requestToTtft":615.5625,"totalTime":675.724609375}
2024-09-18 00:27:08.777 [info] CURSOR LOG: restFunc done f3ad8557-fd9d-4a79-b85c-ef68840cf0c2
2024-09-18 00:27:22.845 [info] CURSOR LOG: restFunc initiated b708a88b-307c-4d6d-abe7-12b799c60424
2024-09-18 00:27:23.363 [info] CURSOR LOG: Done streaming cpp with id b708a88b-307c-4d6d-abe7-12b799c60424
2024-09-18 00:27:23.363 [info] CPP RT LOG: Time taken for streaming cpp 518.5 with request b708a88b-307c-4d6d-abe7-12b799c60424
2024-09-18 00:27:23.364 [info] CPP Request Log with id b708a88b-307c-4d6d-abe7-12b799c60424
2024-09-18 00:27:23.364 [info] =======>Model input 
2024-09-18 00:27:23.364 [info] =======>Model output 
        addCourse(new Course("MTH203", "Math III", 4, 3, "Satish Pandey", "MTH100", 70, "15:00-17:00"));
        addCourse(new Course("MTH210", "Discrete Structures", 4, 3, "Ashish Kumar Pandey", "MTH100", 70, "09:00-11:00"));
        addCourse(new Course("MTH211", "Number Theory", 4, 3, "Debika Banerjee", "MTH100", 70, "11:00-13:00"));
        addCourse(new Course("MTH240", "Real Analysis I", 4, 3, "Nabaneita Ray", "MTH100", 70, "14:00-16:00"));
2024-09-18 00:27:23.364 [info] =======>Debug stream time 189.8124010041356
2024-09-18 00:27:23.364 [info] =======>Debug ttft time 187.57695500552654
2024-09-18 00:27:23.364 [info] Average of latest 20 ttft time 137.48903470705537
2024-09-18 00:27:23.364 [info] Average of latest 20 stream time 156.3168974119951
2024-09-18 00:27:23.364 [info] Average of latest 20 total time NaN
2024-09-18 00:27:23.364 [info] Average of latest 20 client time 620.6310173483456
2024-09-18 00:27:23.364 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:27:23.364 [info] CPP RT LOG: All stats {"streamingtime":518.5,"actualTtftFromStart":644.5751953125,"timeTillServerRequest":126.30517578125,"requestToTtft":518.27001953125,"totalTime":644.758544921875}
2024-09-18 00:27:23.364 [info] CURSOR LOG: restFunc done b708a88b-307c-4d6d-abe7-12b799c60424
2024-09-18 00:27:28.553 [info] CURSOR LOG: restFunc initiated 6c2ca21f-013b-43d5-b9f7-d6f3feb54167
2024-09-18 00:27:29.024 [info] CURSOR LOG: Done streaming cpp with id 6c2ca21f-013b-43d5-b9f7-d6f3feb54167
2024-09-18 00:27:29.024 [info] CPP RT LOG: Time taken for streaming cpp 470.79931640625 with request 6c2ca21f-013b-43d5-b9f7-d6f3feb54167
2024-09-18 00:27:29.025 [info] CPP Request Log with id 6c2ca21f-013b-43d5-b9f7-d6f3feb54167
2024-09-18 00:27:29.025 [info] =======>Model input 
2024-09-18 00:27:29.025 [info] =======>Model output 
    public void viewEnrolledStudents(Scanner scanner, CourseCatalog courseCatalog) {
        viewAssignedCourses();
        System.out.print("Enter the course code to view enrolled students: ");
        String courseCode = scanner.nextLine();
2024-09-18 00:27:29.025 [info] =======>Debug stream time 133.5924990028143
2024-09-18 00:27:29.025 [info] =======>Debug ttft time 123.83406399935484
2024-09-18 00:27:29.025 [info] Average of latest 20 ttft time 136.73042522329422
2024-09-18 00:27:29.025 [info] Average of latest 20 stream time 155.05443083370724
2024-09-18 00:27:29.025 [info] Average of latest 20 total time NaN
2024-09-18 00:27:29.025 [info] Average of latest 20 client time 612.3070339626736
2024-09-18 00:27:29.025 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:27:29.025 [info] CPP RT LOG: All stats {"streamingtime":470.79931640625,"actualTtftFromStart":535.390380859375,"timeTillServerRequest":64.817138671875,"requestToTtft":470.5732421875,"totalTime":535.593505859375}
2024-09-18 00:27:29.025 [info] CURSOR LOG: restFunc done 6c2ca21f-013b-43d5-b9f7-d6f3feb54167
2024-09-18 00:27:31.052 [info] CURSOR LOG: restFunc initiated 66fdc67f-29f2-466d-aa24-22786c737b1c
2024-09-18 00:27:31.518 [info] CURSOR LOG: Done streaming cpp with id 66fdc67f-29f2-466d-aa24-22786c737b1c
2024-09-18 00:27:31.518 [info] CPP RT LOG: Time taken for streaming cpp 466.438232421875 with request 66fdc67f-29f2-466d-aa24-22786c737b1c
2024-09-18 00:27:31.519 [info] CPP Request Log with id 66fdc67f-29f2-466d-aa24-22786c737b1c
2024-09-18 00:27:31.519 [info] =======>Model input 
2024-09-18 00:27:31.519 [info] =======>Model output 
    public void viewEnrolledStudents(Scanner scanner, CourseCatalog courseCatalog) {
        viewAssignedCourses();
        System.out.print("Enter the course code to view enrolled students: ");
        String courseCode = scanner.nextLine();
2024-09-18 00:27:31.519 [info] =======>Debug stream time 96.8393840007484
2024-09-18 00:27:31.519 [info] =======>Debug ttft time 90.91667300090194
2024-09-18 00:27:31.519 [info] Average of latest 20 ttft time 134.3191751063262
2024-09-18 00:27:31.519 [info] Average of latest 20 stream time 151.99048100039363
2024-09-18 00:27:31.519 [info] Average of latest 20 total time NaN
2024-09-18 00:27:31.519 [info] Average of latest 20 client time 604.629728618421
2024-09-18 00:27:31.519 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:27:31.519 [info] CPP RT LOG: All stats {"streamingtime":466.438232421875,"actualTtftFromStart":517.979248046875,"timeTillServerRequest":51.70849609375,"requestToTtft":466.270751953125,"totalTime":518.124267578125}
2024-09-18 00:27:31.519 [info] CURSOR LOG: restFunc done 66fdc67f-29f2-466d-aa24-22786c737b1c
2024-09-18 00:27:33.321 [info] CURSOR LOG: restFunc initiated c8fa74c8-d207-4264-b107-a46669268bea
2024-09-18 00:27:33.925 [info] CURSOR LOG: Done streaming cpp with id c8fa74c8-d207-4264-b107-a46669268bea
2024-09-18 00:27:33.925 [info] CPP RT LOG: Time taken for streaming cpp 603.413330078125 with request c8fa74c8-d207-4264-b107-a46669268bea
2024-09-18 00:27:33.925 [info] CPP Request Log with id c8fa74c8-d207-4264-b107-a46669268bea
2024-09-18 00:27:33.925 [info] =======>Model input 
2024-09-18 00:27:33.925 [info] =======>Model output 
        addCourse(new Course("MTH203", "Math III", 4, 3, "Satish Pandey", "MTH100", 70, "15:00-17:00"));
        addCourse(new Course("MTH210", "Discrete Structures", 4, 3, "Ashish Kumar Pandey", "MTH100", 70, "09:00-11:00"));
        addCourse(new Course("MTH211", "Number Theory", 4, 3, "Debika Banerjee", "MTH100", 70, "11:00-13:00"));
        addCourse(new Course("MTH240", "Real Analysis I", 4, 3, "Nabaneita Ray", "MTH100", 70, "14:00-16:00"));
2024-09-18 00:27:33.925 [info] =======>Debug stream time 191.5430700033903
2024-09-18 00:27:33.925 [info] =======>Debug ttft time 189.23531100153923
2024-09-18 00:27:33.925 [info] Average of latest 20 ttft time 137.06498190108687
2024-09-18 00:27:33.925 [info] Average of latest 20 stream time 153.96811045054346
2024-09-18 00:27:33.925 [info] Average of latest 20 total time NaN
2024-09-18 00:27:33.925 [info] Average of latest 20 client time 604.5689086914062
2024-09-18 00:27:33.925 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:27:33.925 [info] CPP RT LOG: All stats {"streamingtime":603.413330078125,"actualTtftFromStart":659.4267578125,"timeTillServerRequest":56.111572265625,"requestToTtft":603.315185546875,"totalTime":659.507568359375}
2024-09-18 00:27:33.925 [info] CURSOR LOG: restFunc done c8fa74c8-d207-4264-b107-a46669268bea
2024-09-18 00:27:34.252 [info] CURSOR LOG: restFunc initiated aa206618-0012-44eb-a2f6-991dffeaed26
2024-09-18 00:27:34.861 [info] CURSOR LOG: Done streaming cpp with id aa206618-0012-44eb-a2f6-991dffeaed26
2024-09-18 00:27:34.861 [info] CPP RT LOG: Time taken for streaming cpp 610.00244140625 with request aa206618-0012-44eb-a2f6-991dffeaed26
2024-09-18 00:27:34.861 [info] CPP Request Log with id aa206618-0012-44eb-a2f6-991dffeaed26
2024-09-18 00:27:34.861 [info] =======>Model input 
2024-09-18 00:27:34.861 [info] =======>Model output 
        }
    }

    private void filterComplaintsByDate(Scanner scanner, List<Complaint> complaints) {
2024-09-18 00:27:34.861 [info] =======>Debug stream time 149.91876799613237
2024-09-18 00:27:34.861 [info] =======>Debug ttft time 142.12633499503136
2024-09-18 00:27:34.862 [info] Average of latest 20 ttft time 141.23700480107217
2024-09-18 00:27:34.862 [info] Average of latest 20 stream time 154.13042025025933
2024-09-18 00:27:34.862 [info] Average of latest 20 total time NaN
2024-09-18 00:27:34.862 [info] Average of latest 20 client time 618.25751953125
2024-09-18 00:27:34.862 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:27:34.862 [info] CPP RT LOG: All stats {"streamingtime":610.00244140625,"actualTtftFromStart":660.7158203125,"timeTillServerRequest":50.95361328125,"requestToTtft":609.76220703125,"totalTime":660.9287109375}
2024-09-18 00:27:34.862 [info] CURSOR LOG: restFunc done aa206618-0012-44eb-a2f6-991dffeaed26
2024-09-18 00:27:51.021 [info] CURSOR LOG: restFunc initiated 71860562-b4e7-4837-bbd7-8448f3a01e5f
2024-09-18 00:27:51.540 [info] CURSOR LOG: Done streaming cpp with id 71860562-b4e7-4837-bbd7-8448f3a01e5f
2024-09-18 00:27:51.540 [info] CPP RT LOG: Time taken for streaming cpp 518.397705078125 with request 71860562-b4e7-4837-bbd7-8448f3a01e5f
2024-09-18 00:27:51.541 [info] CPP Request Log with id 71860562-b4e7-4837-bbd7-8448f3a01e5f
2024-09-18 00:27:51.541 [info] =======>Model input 
2024-09-18 00:27:51.541 [info] =======>Model output 
    public void viewEnrolledStudents(Scanner scanner, CourseCatalog courseCatalog) {
        viewAssignedCourses();
        System.out.print("Enter the course code to view enrolled students: ");
        String courseCode = scanner.nextLine();
2024-09-18 00:27:51.541 [info] =======>Debug stream time 97.86118800193071
2024-09-18 00:27:51.541 [info] =======>Debug ttft time 93.86314100027084
2024-09-18 00:27:51.541 [info] Average of latest 20 ttft time 142.5681377509609
2024-09-18 00:27:51.541 [info] Average of latest 20 stream time 155.32942855041475
2024-09-18 00:27:51.541 [info] Average of latest 20 total time NaN
2024-09-18 00:27:51.541 [info] Average of latest 20 client time 631.8224487304688
2024-09-18 00:27:51.541 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:27:51.541 [info] CPP RT LOG: All stats {"streamingtime":518.397705078125,"actualTtftFromStart":579.104248046875,"timeTillServerRequest":60.947509765625,"requestToTtft":518.15673828125,"totalTime":579.33056640625}
2024-09-18 00:27:51.541 [info] CURSOR LOG: restFunc done 71860562-b4e7-4837-bbd7-8448f3a01e5f
2024-09-18 00:28:07.845 [info] CURSOR LOG: restFunc initiated 987d8d0b-d7a5-4fbb-999d-6c1761f76a5c
2024-09-18 00:28:08.297 [info] CURSOR LOG: Done streaming cpp with id 987d8d0b-d7a5-4fbb-999d-6c1761f76a5c
2024-09-18 00:28:08.297 [info] CPP RT LOG: Time taken for streaming cpp 450.827880859375 with request 987d8d0b-d7a5-4fbb-999d-6c1761f76a5c
2024-09-18 00:28:08.297 [info] CPP Request Log with id 987d8d0b-d7a5-4fbb-999d-6c1761f76a5c
2024-09-18 00:28:08.297 [info] =======>Model input 
2024-09-18 00:28:08.297 [info] =======>Model output 
    public void viewEnrolledStudents(Scanner scanner, CourseCatalog courseCatalog) {
        viewAssignedCourses();
        System.out.print("Enter the course code to view enrolled students: ");
        String courseCode = scanner.nextLine();
2024-09-18 00:28:08.297 [info] =======>Debug stream time 111.04594600200653
2024-09-18 00:28:08.297 [info] =======>Debug ttft time 106.15199200063944
2024-09-18 00:28:08.297 [info] Average of latest 20 ttft time 137.6875125007704
2024-09-18 00:28:08.297 [info] Average of latest 20 stream time 150.57260535042732
2024-09-18 00:28:08.297 [info] Average of latest 20 total time NaN
2024-09-18 00:28:08.297 [info] Average of latest 20 client time 590.793505859375
2024-09-18 00:28:08.297 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:28:08.297 [info] CPP RT LOG: All stats {"streamingtime":450.827880859375,"actualTtftFromStart":497.656005859375,"timeTillServerRequest":51.09521484375,"requestToTtft":446.560791015625,"totalTime":501.90673828125}
2024-09-18 00:28:08.297 [info] CURSOR LOG: restFunc done 987d8d0b-d7a5-4fbb-999d-6c1761f76a5c
2024-09-18 00:39:47.779 [info] CURSOR LOG: restFunc initiated 44c062b7-2c5e-4288-80f2-08439a428285
2024-09-18 00:39:49.099 [info] CURSOR LOG: Done streaming cpp with id 44c062b7-2c5e-4288-80f2-08439a428285
2024-09-18 00:39:49.099 [info] CPP RT LOG: Time taken for streaming cpp 1319.06787109375 with request 44c062b7-2c5e-4288-80f2-08439a428285
2024-09-18 00:39:49.101 [info] CPP Request Log with id 44c062b7-2c5e-4288-80f2-08439a428285
2024-09-18 00:39:49.101 [info] =======>Model input <｜begin▁of▁sentence｜>You are an intelligent programmer named CursorBot. You are an expert at coding. Your goal is to help your colleague finish a code change.

User: Help me finish a coding change. In particular, you will see a series of snippets from files I've recently viewed, the file I am editing, then a history of my recent codebase changes, then current compiler and linter errors. You will then rewrite the <code_to_rewrite>, to match what you think I would do next in the codebase. Note: I might have stopped in the middle of typing.

Here are some snippets of code I've recently looked at, roughly from oldest to newest. It's possible these aren't entirely relevant to my code change.
<recently_viewed_snippets>
<snippet>
(`Main.java`)


    private static void handleStudentMenu(Credentials credentials, String id, CourseCatalog courseCatalog) {
        List<String> stucreds = credentials.getstucreds(id);
        System.out.println(stucreds.get(0) + " " + stucreds.get(1) + " " + stucreds.get(2) + " " + stucreds.get(3));
        if (stucreds.size() < 4) {
        System.out.println("Error: Insufficient student information.");
            return;
        }
        Student student = new Student(stucreds.get(0), stucreds.get(1), stucreds.get(2), stucreds.get(3));
        System.out.println("Hello " + "\u001B[32m" + stucreds.get(0) + "\u001B[0m");

        while (true) {
            System.out.println("1. View Available Courses");
            System.out.println("2. Register for a Course");
            System.out.println("3. View Registered Courses");
            System.out.println("4. View Completed Courses");
            System.out.println("5. Drop a Course");
            System.out.println("6. Track Progress");
            System.out.println("7. Submit Complaint");
            System.out.println("8. View Schedule");
            System.out.println("9. Logout");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    student.viewAvailableCourses(courseCatalog);
                    break;
                case 2:
                    student.registerForCourse(scanner, courseCatalog);
                    break;
                case 3:
                    student.viewRegisteredCourses();
                    break;
                case 4:
                    student.viewCompletedCourses();
                    break;
                case 5:
                    student.dropCourse(scanner);
                    break;
                case 6:
                    student.trackProgress();
                    break;
                case 7:
                    student.submitComplaint(scanner);
                    break;
                case 8:
                    student.viewSchedule();
</snippet>
<snippet>
(`Professor.java`)


                case 3:
                    return;
                default:
                    System.out.println("Invalid selection. Please try again.");
            }
        }
    }

    public void loadAssignedCourses(CourseCatalog courseCatalog) {
        this.assignedCourses = courseCatalog.getCoursesForProfessor(this.getId());
    }

    private void viewAssignedCourses() {
        System.out.println("Assigned Courses:");
        if (assignedCourses.isEmpty()) {
            System.out.println("No courses assigned.");
        } else {
            CourseTable.printCourseTable(assignedCourses);
        }
    }

    private void updateCourseDetails(Scanner scanner, CourseCatalog courseCatalog) {
        viewAssignedCourses(); // Remove the courseCatalog argument here
        System.out.print("Enter the course code to update: ");
        String courseCode = scanner.nextLine();
        
        Course course = assignedCourses.stream()
                .filter(c -> c.getCode().equals(courseCode))
                .findFirst()
                .orElse(null);

        if (course == null) {
            System.out.println("Invalid course code or you are not assigned to this course.");
            return;
        }

        while (true) {
            System.out.println("1. Update Syllabus");
            System.out.println("2. Update Class Timings");
            System.out.println("3. Update Prerequisites");
            System.out.println("4. Update Enrollment Limit");
            System.out.println("5. Update Office Hours");
            System.out.println("6. Back to Main Menu");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            if (choice == 6) break;

</snippet>
</recently_viewed_snippets>


Here is the file that I'm looking at (`CourseCatalog.java`):
<file>
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class CourseCatalog {
    private Map<String, Course> courses;
    private Map<String, Student> students;
    private Map<String, Professor> professors;
    private List<Complaint> complaints;
    private Map<String, List<Course>> studentRegistrations;
    private Map<String, List<Course>> professorAssignments;

    public CourseCatalog() {
        this.courses = new HashMap<>();
        this.students = new HashMap<>();
        this.professors = new HashMap<>();
        this.complaints = new ArrayList<>();
        this.studentRegistrations = new HashMap<>();
        this.professorAssignments = new HashMap<>();
        initializeCourses();
    }

    private void initializeCourses() {
        // Semester 1 courses (no prerequisites)
        addCourse(new Course("MTH100", "Linear Algebra", 4, 1, "Samaresh Chatterjee (V)", null, 600, "09:00-11:00"));
        addCourse(new Course("CSE101", "Introduction to Programming", 4, 1, "B N Jain (V)", null, 600, "11:00-13:00"));
        addCourse(new Course("DES102", "Introduction to HCI", 4, 1, "Rajiv Ratn Shah", null, 600, "14:00-16:00"));
        addCourse(new Course("ECE111", "Digital Circuits", 4, 1, "Pravesh Biyani", null, 600, "16:00-18:00"));
        addCourse(new Course("COM101", "Communication Skills", 2, 1, "Payel C Mukherjee (V)", null, 600, "09:00-11:00"));

        // Semester 2 courses (no prerequisites)
        addCourse(new Course("BIO101", "Foundations of Biology", 4, 2, "Sriram K.", null, 300, "09:00-11:00"));
        addCourse(new Course("CSE102", "Data Structures and Algorithms", 4, 2, "Ojaswa Sharma", "CSE101", 300, "11:00-13:00"));
        addCourse(new Course("CSE112", "Computer Organisation", 4, 2, "Sujay Deb", null, 300, "14:00-16:00"));
        addCourse(new Course("CSE140", "Introduction to Intelligent Systems", 4, 2, "Jainendra Shukla", "CSE101", 300, "16:00-18:00"));
        addCourse(new Course("DES101", "Design Drawing and Visualization", 4, 2, "Anoop Ratn (V)", null, 300, "09:00-12:00"));
        addCourse(new Course("DES202", "Visual Design & Communication", 4, 2, "Anoop Ratn (V)", null, 300, "13:00-15:00"));
        addCourse(new Course("ECE113", "Basic Electronics", 4, 2, "Tammam Tillo", null, 300, "15:00-17:00"));
        addCourse(new Course("MTH201", "Probability and Statistics", 4, 2, "Subhajit Ghosechowdhury", null, 300, "09:00-11:00"));
<<<AREA_AROUND_CODE_TO_REWRITE_WILL_BE_INSERTED_HERE>>>
        addCourse(new Course("ENT202", "Social Entrepreneurship", 4, 3, "Jyoti Sharma (V)", null, 70, "09:00-12:00"));
        addCourse(new Course("SSH240", "Politics in Digital Era", 4, 3, "Asim Khan", null, 70, "13:00-15:00"));
        addCourse(new Course("SOC216", "Political Anthropology: State, Subject, Power", 4, 3, "Deepak Prince", "SOC101", 70, "15:00-17:00"));
        addCourse(new Course("SSH221", "Social & Political Philosophy", 4, 3, "Manohar Kumar", null, 70, "09:00-11:00"));

        // Semester 4 courses (some with prerequisites)
        addCourse(new Course("BIO213", "Introduction to Quantitative Biology", 4, 4, "Jaspreet Kaur", "BIO101,MTH201", 70, "09:00-11:00"));
        addCourse(new Course("BIO221", "Practical Bioinformatics", 4, 4, "Tavpritesh Sethi", "BIO101,CSE101", 70, "11:00-13:00"));
        addCourse(new Course("ECE113", "Basic Electronics", 4, 4, "Tammam Tillo", "ECE111", 70, "14:00-16:00"));
        addCourse(new Course("CSE202", "Fundamentals of Database Systems", 4, 4, "Mukesh Mohania, Madiha (TF)", "CSE102", 70, "16:00-18:00"));
        addCourse(new Course("CSE222", "Analysis and Design of Algorithms", 4, 4, "Diptapriyo Majumdar, Meera (TF)", "CSE102,MTH100", 70, "09:00-12:00"));
        addCourse(new Course("CSE322", "Theory of Computation", 4, 4, "Syamantak Das", "CSE121", 70, "13:00-15:00"));
        addCourse(new Course("CSE342/ECE356", "Statistical Machine Learning", 4, 4, "A V Subramanyam", "MTH201,CSE101", 70, "15:00-17:00"));
        addCourse(new Course("DES205", "Design of Interactive Systems", 4, 4, "Kalpana Shankhawar", "DES102", 70, "09:00-11:00"));
        addCourse(new Course("DES206", "Prototyping Interactive Systems", 4, 4, "Richa Gupta", "DES102", 70, "11:00-13:00"));
        addCourse(new Course("ECE214", "Integrated Electronics", 4, 4, "Abhijit Mitra", "ECE113", 70, "14:00-16:00"));
        addCourse(new Course("ECE230", "Fields and Waves", 4, 4, "Sayak Bhattacharya", "MTH100,ECE111", 70, "16:00-18:00"));
        addCourse(new Course("ECE240", "Principles of Communication Systems", 4, 4, "Ranjitha P", "ECE250", 70, "09:00-11:00"));
        addCourse(new Course("ECE210", "Physics of Semiconductor Devices (New)", 4, 4, "Ram Krishna Ghosh", "ECE113", 70, "11:00-13:00"));
        addCourse(new Course("ECE211", "Electronic System Design (New)", 4, 4, "Alok Mittal (G)", "ECE113", 70, "14:00-16:00"));
        addCourse(new Course("MTH204", "Maths IV - ODE/PDE", 4, 4, "Ashish Kumar Pandey", "MTH203", 70, "16:00-18:00"));
        addCourse(new Course("MTH212", "Abstract Algebra I", 4, 4, "Sneha Chaubey", "MTH210", 70, "09:00-12:00"));
        addCourse(new Course("MTH300", "Introduction to Mathematical Logic", 4, 4, "Sankha Basu", "MTH210", 70, "13:00-15:00"));
        addCourse(new Course("MTH310", "Graph Theory", 4, 4, "Samaresh Chatterji (V)", "MTH210", 70, "15:00-17:00"));
        addCourse(new Course("MTH372", "Statistical Inference", 4, 4, "Anisha Aggarwal (G)", "MTH201", 70, "09:00-11:00"));
        addCourse(new Course("MTH374", "Linear Optimization", 4, 4, "Pravesh Biyani", "MTH100", 70, "11:00-13:00"));
        addCourse(new Course("MTH377", "Convex Optimization", 4, 4, "Ruhi Sonal", "MTH100", 70, "14:00-16:00"));
        addCourse(new Course("ECO221", "Econometrics 1", 4, 4, "JV Meenakshi", "MTH201,ECO223", 70, "16:00-18:00"));
        addCourse(new Course("SOC213", "Introduction to Digital Ethnography", 4, 4, "Soibam Haripriya", "SOC101", 70, "09:00-11:00"));
        addCourse(new Course("SSH215", "Nation and Her Narratives", 4, 4, "Payel C Mukherjee (V)", null, 70, "11:00-13:00"));
        addCourse(new Course("SSH325", "Ethics in AI", 4, 4, "Manohar Kumar", "CSE140", 70, "14:00-16:00"));
        addCourse(new Course("ENT301", "Foundations of Marketing", 4, 4, "Jyoti Sharma (V)", null, 70, "16:00-18:00"));
        addCourse(new Course("ESC207", "Ecology, Evolution, and Environment", 2, 4, "D. K. Sharma (V)", "BIO101", 70, "09:00-11:00"));
    }

    public void addCourse(Course course) {
        courses.put(course.getCode(), course);
    }

    public boolean removeCourse(String courseCode) {
        Course removed = courses.remove(courseCode);
        if (removed != null) {
            // Remove course from all professors' assigned courses
            for (Professor professor : professors.values()) {
                professor.removeAssignedCourse(removed);
            }
            // Remove course from all students' registered courses
            for (Student student : students.values()) {
                student.dropCourse(removed);
            }
            return true;
        }
        return false;
    }

    public Course getCourse(String courseCode) {
        return courses.get(courseCode);
    }

    public List<Course> getCoursesForSemester(int semester) {
        return courses.values().stream()
                .filter(course -> course.getSemester() == semester)
                .toList();
    }

    public void viewCourses() {
        System.out.println("#=---- Course Catalog ----=#");
        for (Course course : courses.values()) {
            System.out.println(course);
        }
    }

    public void addStudent(Student student) {
        students.put(student.getId(), student);
    }

    public Student getStudent(String studentId) {
        return students.get(studentId);
    }

    public List<Student> getAllStudents() {
        return new ArrayList<>(students.values());
    }

    public void addProfessor(Professor professor) {
        professors.put(professor.getId(), professor);
    }

    public Professor getProfessor(String professorId) {
        return professors.get(professorId);
    }

    public List<Professor> getAllProfessors() {
        return new ArrayList<>(professors.values());
    }

    public void addComplaint(Complaint complaint) {
        complaints.add(complaint);
    }

    public List<Complaint> getAllComplaints() {
        return new ArrayList<>(complaints);
    }

    public void updateCourse(Course course) {
        courses.put(course.getCode(), course);
    }

    public void updateStudent(Student student) {
        students.put(student.getId(), student);
    }

    public void updateProfessor(Professor professor) {
        professors.put(professor.getId(), professor);
    }

    public void assignProfessorToCourse(String professorId, String courseCode) {
        Professor professor = professors.get(professorId);
        Course course = courses.get(courseCode);
        if (professor != null && course != null) {
            course.assignProfessor(professor);
            professor.addAssignedCourse(course);
        }
    }

    public void registerStudentForCourse(String studentId, String courseCode) {
        Student student = students.get(studentId);
        Course course = courses.get(courseCode);
        if (student != null && course != null) {
            if (student.canRegisterForCourse(course)) {
                student.registerForCourse(course);
                course.enrollStudent(student);
            }
        }
    }

    public void dropStudentFromCourse(String studentId, String courseCode) {
        Student student = students.get(studentId);
        Course course = courses.get(courseCode);
        if (student != null && course != null) {
            student.dropCourse(course);
            course.removeStudent(student);
        }
    }

    public void updateComplaintStatus(Complaint complaint, String newStatus) {
        complaint.setStatus(newStatus);
    }

    public List<Complaint> getFilteredComplaints(String status, String date) {
        return complaints.stream()
                .filter(c -> (status == null || c.getStatus().equals(status)) &&
                             (date == null || c.getDate().equals(date)))
                .toList();
    }

    public List<Course> getStudentRegistrations(String studentId) {
        return studentRegistrations.getOrDefault(studentId, new ArrayList<>());
    }

    public List<Course> getProfessorAssignments(String professorId) {
        return professorAssignments.getOrDefault(professorId, new ArrayList<>());
    }

    public List<Student> getEnrolledStudents(String courseCode) {
        Course course = courses.get(courseCode);
        return course != null ? course.getEnrolledStudents() : new ArrayList<>();
    }

    public List<Course> getCoursesForProfessor(String professorId) {
        return courses.values().stream()
                .filter(course -> course.getAssignedProfessor() != null &&
                        course.getAssignedProfessor().getId().equals(professorId))
                .collect(Collectors.toList());
    }

    public List<Course> getAllCourses() {
        return new ArrayList<>(courses.values());
    }
}
</file>

Here are some snippets of code I just looked at:
<recently_viewed_snippets>
<snippet>
(`Student.java`)


import java.util.Scanner;
import java.util.HashMap;

public class Student extends User {
    private List<Course> registeredCourses;
    private List<Course> completedCourses;
    private List<Complaint> complaints;
    private int totalCredits;
    private int currentSemester;
    private String branch;
    private double cgpa;

    public Student(String name, String email, String id, String branch) {
        super(name, email, id);
        this.registeredCourses = new ArrayList<>();
        this.completedCourses = new ArrayList<>();
        this.complaints = new ArrayList<>();
        this.totalCredits = 0;
        this.branch = branch;
        this.currentSemester = 1;
    }

    public void viewAvailableCourses(CourseCatalog courseCatalog) {
        System.out.print("Enter the semester to view courses for: ");
        int semester = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        List<Course> availableCourses = courseCatalog.getCoursesForSemester(semester);
        System.out.println("#=---- Available Courses for Semester " + semester + " ----=#");
        CourseTable.printCourseTable(availableCourses);
    }

    public void registerForCourse(Scanner scanner, CourseCatalog courseCatalog) {
        viewAvailableCourses(courseCatalog);
        System.out.print("Enter the course code to register: ");
        String courseCode = scanner.nextLine();
        Course course = courseCatalog.getCourse(courseCode);
        
        if (course == null) {
            System.out.println("Invalid course code.");
            return;
        }

        if (course.getSemester() != currentSemester) {
            System.out.println("This course is not available for your current semester.");
            return;
        }
        if (!meetsPrerequisites(course)) {
            System.out.println("You don't meet the prerequisites for this course.");
</snippet>
<snippet>
(`Admin.java`)


            default:
                System.out.println("Invalid selection.");
        }
    }

    private void filterComplaintsByStatus(Scanner scanner, List<Complaint> complaints) {
        System.out.print("Enter status to filter (Pending/Resolved): ");
        String status = scanner.nextLine().toUpperCase();

        for (Complaint complaint : complaints) {
            if (complaint.getStatus().equals(status)) {
                System.out.println(complaint);
            }
        }
    }

    private void filterComplaintsByDate(Scanner scanner, List<Complaint> complaints) {
        System.out.print("Enter date to filter (YYYY-MM-DD): ");
        String date = scanner.nextLine();

        for (Complaint complaint : complaints) {
            if (complaint.getDate().equals(date)) {
                System.out.println(complaint);
            }
        }
    }

    @Override
    public boolean logout() {
        System.out.println("#=---- Logging Out ----=#");
        return true;
    }

    public void viewCourses(CourseCatalog courseCatalog) {
        System.out.println("#=---- Course Catalog ----=#");
        CourseTable.printCourseTable(courseCatalog.getAllCourses());
    }
}
</snippet>
</recently_viewed_snippets>

Here is my recent series of edits from oldest to newest.
<diff_history>
Professor.java
105-|        viewAssignedCourses(courseCatalog);
105+|        viewAssignedCourses();
Admin.java
345-|
346-|    public void assignProfessorToCourse(Scanner scanner, CourseCatalog courseCatalog) {
347-|        System.out.print("Enter course code: ");
348-|        String courseCode = scanner.nextLine();
349-|        Course course = courseCatalog.getCourse(courseCode);
350-|
351-|        if (course == null) {
352-|            System.out.println("Course not found.");
353-|            return;
354-|        }
355-|
356-|        List<Professor> professors = courseCatalog.getAllProfessors();
357-|        for (int i = 0; i < professors.size(); i++) {
358-|            System.out.println((i + 1) + ". " + professors.get(i).getName());
359-|        }
360-|
361-|        System.out.print("Select a professor (enter number): ");
362-|        int professorIndex = scanner.nextInt() - 1;
363-|        scanner.nextLine(); // Consume newline
364-|
365-|        if (professorIndex < 0 || professorIndex >= professors.size()) {
366-|            System.out.println("Invalid professor selection.");
367-|            return;
368-|        }
369-|
370-|        Professor selectedProfessor = professors.get(professorIndex);
371-|        courseCatalog.assignProfessorToCourse(courseCode, selectedProfessor);
372-|        System.out.println("Professor " + selectedProfessor.getName() + " assigned to " + course.getTitle());
373-|    }
Main.java
140-|                    professor.viewEnrolledStudents(scanner, courseCatalog);
140+|                    professor.viewEnrolledStudents(courseCatalog);
141 |                    break;
142 |                case 3:
143-|                    professor.logout();
144-|                    return;
143+|                    if (professor.logout()) {
144+|                        return;
145+|                    }
146+|                    break;
</diff_history>



<area_around_code_to_rewrite>
        addCourse(new Course("SOC101", "Introduction to Sociology and Anthropology", 4, 2, "Deepak Prince", null, 300, "11:00-13:00"));
        addCourse(new Course("SSH101", "Critical Thinking and Readings in Social Sciences", 4, 2, "Aasim Khan", null, 300, "14:00-16:00"));
        addCourse(new Course("SSH101 (Priyadarshi)", "Critical Thinking and Readings in Social Sciences", 4, 2, "Priyadarshi", null, 300, "16:00-18:00"));
        addCourse(new Course("ECO223", "Money and Banking", 4, 2, "Kiriti Kanjilal", null, 300, "09:00-11:00"));

        // Semester 3 courses (some with prerequisites)
        addCourse(new Course("BIO211", "Cell Biology and Biochemistry", 4, 3, "Jaspreet Kaur", "BIO101", 70, "09:00-11:00"));
        addCourse(new Course("BIO214", "Genetics and Molecular Biology", 4, 3, "Gaurav Ahuja", "BIO101", 70, "11:00-13:00"));
        addCourse(new Course("CSE121", "Discrete Mathematics", 4, 3, "Bapi Chatterjee", "MTH100", 70, "14:00-16:00"));
        addCourse(new Course("CSE201", "Advanced Programming", 4, 3, "Sambuddho Chakravarty", "CSE101", 70, "16:00-18:00"));
        addCourse(new Course("CSE231", "Operating Systems", 4, 3, "Vivek Kumar", "CSE102", 70, "09:00-12:00"));
        addCourse(new Course("DES201", "Design Processes and Perspectives", 4, 3, "Anmol Srivastava", null, 70, "13:00-15:00"));

<code_to_rewrite>
        addCourse(new Course("MTH203", "Math III", 4, 3, "Satish Pandey", "MTH100", 70, "15:00-17:00"));
        addCourse(new Course("MTH210", "Discrete Structures", 4, 3, "Ashish Kumar Pandey", "MTH100", 70, "09:00-11:00"));
        addCourse(new Course("MTH211", "Number Theory", 4, 3, "Debika Banerjee", "MTH100", 70, "11:00-13:00"));
        addCourse(new Course("MTH240", "Real Analysis I", 4, 3, "Nabaneita Ray", "MTH100", 70, "14:00-16:00"));
</code_to_rewrite>
        addCourse(new Course("ECE215", "Circuit Theory and Devices", 4, 3, "Pragya Kosta", "ECE111", 70, "16:00-18:00"));
        addCourse(new Course("ECE250", "Signals & Systems", 4, 3, "Anubha Gupta", "MTH100", 70, "09:00-11:00"));
        addCourse(new Course("ECE270", "Embedded Logic Design", 4, 3, "Sumit Darak", "ECE111", 70, "11:00-13:00"));
        addCourse(new Course("SSH201", "Research Methods in Social Sciences and Design", 4, 3, "Mrinmoy Chakrabarty", null, 70, "14:00-16:00"));
        addCourse(new Course("ENT201", "Foundations of Entrepreneurship", 4, 3, "Anupam Saronwala", null, 70, "16:00-18:00"));

</area_around_code_to_rewrite>


<diff_history>
Main.java
140-|                    professor.viewEnrolledStudents(courseCatalog);
140+|                    professor.viewEnrolledStudents(scanner, courseCatalog);
</diff_history>

Now, continue where I left off and finish my change by rewriting "code_to_rewrite":




Assistant: 
2024-09-18 00:39:49.101 [info] =======>Model output 
        addCourse(new Course("MTH203", "Math III", 4, 3, "Satish Pandey", "MTH100", 70, "15:00-17:00"));
        addCourse(new Course("MTH210", "Discrete Structures", 4, 3, "Ashish Kumar Pandey", "MTH100", 70, "09:00-11:00"));
        addCourse(new Course("MTH211", "Number Theory", 4, 3, "Debika Banerjee", "MTH100", 70, "11:00-13:00"));
        addCourse(new Course("MTH240", "Real Analysis I", 4, 3, "Nabaneita Ray", "MTH100", 70, "14:00-16:00"));
2024-09-18 00:39:49.101 [info] =======>Debug stream time 264.6170450001955
2024-09-18 00:39:49.101 [info] =======>Debug ttft time 196.581856995821
2024-09-18 00:39:49.101 [info] Average of latest 20 ttft time 139.69338380079716
2024-09-18 00:39:49.101 [info] Average of latest 20 stream time 155.53573435042054
2024-09-18 00:39:49.101 [info] Average of latest 20 total time NaN
2024-09-18 00:39:49.101 [info] Average of latest 20 client time 597.6967163085938
2024-09-18 00:39:49.101 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:39:49.101 [info] CPP RT LOG: All stats {"streamingtime":1319.06787109375,"actualTtftFromStart":1270.90673828125,"timeTillServerRequest":54.7646484375,"requestToTtft":1216.14208984375,"totalTime":1373.8154296875}
2024-09-18 00:39:49.101 [info] CURSOR LOG: restFunc done 44c062b7-2c5e-4288-80f2-08439a428285
2024-09-18 00:40:04.092 [info] CURSOR LOG: restFunc initiated babdf036-fb53-44e7-a77c-9f79343c731e
2024-09-18 00:40:04.671 [info] CURSOR LOG: Done streaming cpp with id babdf036-fb53-44e7-a77c-9f79343c731e
2024-09-18 00:40:04.672 [info] CPP RT LOG: Time taken for streaming cpp 578.71484375 with request babdf036-fb53-44e7-a77c-9f79343c731e
2024-09-18 00:40:04.672 [info] CPP Request Log with id babdf036-fb53-44e7-a77c-9f79343c731e
2024-09-18 00:40:04.672 [info] =======>Model input 
2024-09-18 00:40:04.672 [info] =======>Model output 
        }
    }

    private void filterComplaintsByDate(Scanner scanner, List<Complaint> complaints) {
2024-09-18 00:40:04.672 [info] =======>Debug stream time 159.93238999694586
2024-09-18 00:40:04.672 [info] =======>Debug ttft time 150.92264399677515
2024-09-18 00:40:04.673 [info] Average of latest 20 ttft time 140.13443670067937
2024-09-18 00:40:04.673 [info] Average of latest 20 stream time 156.26685495059937
2024-09-18 00:40:04.673 [info] Average of latest 20 total time NaN
2024-09-18 00:40:04.673 [info] Average of latest 20 client time 601.342919921875
2024-09-18 00:40:04.673 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:40:04.673 [info] CPP RT LOG: All stats {"streamingtime":578.71484375,"actualTtftFromStart":631.65380859375,"timeTillServerRequest":53.279296875,"requestToTtft":578.37451171875,"totalTime":631.957763671875}
2024-09-18 00:40:04.673 [info] CURSOR LOG: restFunc done babdf036-fb53-44e7-a77c-9f79343c731e
2024-09-18 00:40:05.146 [info] CURSOR LOG: restFunc initiated 509ed34d-2b44-42ef-addc-ce7b4dfcd697
2024-09-18 00:40:05.769 [info] CURSOR LOG: Done streaming cpp with id 509ed34d-2b44-42ef-addc-ce7b4dfcd697
2024-09-18 00:40:05.769 [info] CPP RT LOG: Time taken for streaming cpp 622.2646484375 with request 509ed34d-2b44-42ef-addc-ce7b4dfcd697
2024-09-18 00:40:05.769 [info] CPP Request Log with id 509ed34d-2b44-42ef-addc-ce7b4dfcd697
2024-09-18 00:40:05.769 [info] =======>Model input 
2024-09-18 00:40:05.769 [info] =======>Model output 

    private boolean hasCompletedCourse(String courseCode) {
        for (Course course : completedCourses) {
            if (course.getCode().equals(courseCode)) {
2024-09-18 00:40:05.769 [info] =======>Debug stream time 150.2098300009966
2024-09-18 00:40:05.770 [info] =======>Debug ttft time 144.8516120016575
2024-09-18 00:40:05.770 [info] Average of latest 20 ttft time 141.14171725083142
2024-09-18 00:40:05.770 [info] Average of latest 20 stream time 157.08081955071538
2024-09-18 00:40:05.770 [info] Average of latest 20 total time NaN
2024-09-18 00:40:05.770 [info] Average of latest 20 client time 608.8296508789062
2024-09-18 00:40:05.770 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:40:05.770 [info] CPP RT LOG: All stats {"streamingtime":622.2646484375,"actualTtftFromStart":673.596435546875,"timeTillServerRequest":51.672119140625,"requestToTtft":621.92431640625,"totalTime":673.908203125}
2024-09-18 00:40:05.770 [info] CURSOR LOG: restFunc done 509ed34d-2b44-42ef-addc-ce7b4dfcd697
2024-09-18 00:40:06.019 [info] CURSOR LOG: restFunc initiated 41419a6a-6eb8-4d39-afb3-fc321fd5325d
2024-09-18 00:40:06.576 [info] CURSOR LOG: Done streaming cpp with id 41419a6a-6eb8-4d39-afb3-fc321fd5325d
2024-09-18 00:40:06.576 [info] CPP RT LOG: Time taken for streaming cpp 557.8515625 with request 41419a6a-6eb8-4d39-afb3-fc321fd5325d
2024-09-18 00:40:06.576 [info] CPP Request Log with id 41419a6a-6eb8-4d39-afb3-fc321fd5325d
2024-09-18 00:40:06.576 [info] =======>Model input 
2024-09-18 00:40:06.576 [info] =======>Model output 
    public void loadAssignedCourses(CourseCatalog courseCatalog) {
        this.assignedCourses = courseCatalog.getCoursesForProfessor(this.getId());
    }

2024-09-18 00:40:06.576 [info] =======>Debug stream time 335.1994460001588
2024-09-18 00:40:06.576 [info] =======>Debug ttft time 324.30095099657774
2024-09-18 00:40:06.577 [info] Average of latest 20 ttft time 149.63924895059318
2024-09-18 00:40:06.577 [info] Average of latest 20 stream time 165.69607555065303
2024-09-18 00:40:06.577 [info] Average of latest 20 total time NaN
2024-09-18 00:40:06.577 [info] Average of latest 20 client time 612.1725830078125
2024-09-18 00:40:06.577 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:40:06.577 [info] CPP RT LOG: All stats {"streamingtime":557.8515625,"actualTtftFromStart":608.477783203125,"timeTillServerRequest":50.85693359375,"requestToTtft":557.620849609375,"totalTime":608.684814453125}
2024-09-18 00:40:06.577 [info] CURSOR LOG: restFunc done 41419a6a-6eb8-4d39-afb3-fc321fd5325d
2024-09-18 00:51:32.653 [info] CURSOR LOG: restFunc initiated 402fd858-5f4d-45f1-b51d-064e44848a38
2024-09-18 00:51:33.984 [info] CURSOR LOG: Done streaming cpp with id 402fd858-5f4d-45f1-b51d-064e44848a38
2024-09-18 00:51:33.984 [info] CPP RT LOG: Time taken for streaming cpp 1330.4287109375 with request 402fd858-5f4d-45f1-b51d-064e44848a38
2024-09-18 00:51:33.984 [info] CPP Request Log with id 402fd858-5f4d-45f1-b51d-064e44848a38
2024-09-18 00:51:33.984 [info] =======>Model input 
2024-09-18 00:51:33.984 [info] =======>Model output 
    public boolean removeCourse(String courseCode) {
        Course removed = courses.remove(courseCode);
        if (removed != null) {
            // Remove course from all professors' assigned courses
2024-09-18 00:51:33.984 [info] =======>Debug stream time 206.93191599845886
2024-09-18 00:51:33.984 [info] =======>Debug ttft time 198.86579199880362
2024-09-18 00:51:33.984 [info] Average of latest 20 ttft time 150.6250422505662
2024-09-18 00:51:33.984 [info] Average of latest 20 stream time 166.93152475040407
2024-09-18 00:51:33.984 [info] Average of latest 20 total time NaN
2024-09-18 00:51:33.984 [info] Average of latest 20 client time 650.3282104492188
2024-09-18 00:51:33.984 [info] Average of latest 20 discrepencies NaN
2024-09-18 00:51:33.984 [info] CPP RT LOG: All stats {"streamingtime":1330.4287109375,"actualTtftFromStart":1383.62841796875,"timeTillServerRequest":53.415771484375,"requestToTtft":1330.212646484375,"totalTime":1383.8173828125}
2024-09-18 00:51:33.984 [info] CURSOR LOG: restFunc done 402fd858-5f4d-45f1-b51d-064e44848a38
2024-09-18 01:04:22.284 [info] CURSOR LOG: restFunc initiated 0aa6e79a-52bf-4411-ae3e-d32e4b984c41
2024-09-18 01:04:23.689 [info] CURSOR LOG: Done streaming cpp with id 0aa6e79a-52bf-4411-ae3e-d32e4b984c41
2024-09-18 01:04:23.689 [info] CPP RT LOG: Time taken for streaming cpp 1405.35986328125 with request 0aa6e79a-52bf-4411-ae3e-d32e4b984c41
2024-09-18 01:04:23.689 [info] CPP Request Log with id 0aa6e79a-52bf-4411-ae3e-d32e4b984c41
2024-09-18 01:04:23.689 [info] =======>Model input 
2024-09-18 01:04:23.689 [info] =======>Model output 
    public boolean removeCourse(String courseCode) {
        Course removed = courses.remove(courseCode);
        if (removed != null) {
            // Remove course from all professors' assigned courses
2024-09-18 01:04:23.689 [info] =======>Debug stream time 194.6746580004692
2024-09-18 01:04:23.689 [info] =======>Debug ttft time 187.85740399360657
2024-09-18 01:04:23.690 [info] Average of latest 20 ttft time 149.32011280003934
2024-09-18 01:04:23.690 [info] Average of latest 20 stream time 163.76602005045862
2024-09-18 01:04:23.690 [info] Average of latest 20 total time NaN
2024-09-18 01:04:23.690 [info] Average of latest 20 client time 691.0255493164062
2024-09-18 01:04:23.690 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:04:23.690 [info] CPP RT LOG: All stats {"streamingtime":1405.35986328125,"actualTtftFromStart":1525.30078125,"timeTillServerRequest":120.1123046875,"requestToTtft":1405.1884765625,"totalTime":1525.4384765625}
2024-09-18 01:04:23.690 [info] CURSOR LOG: restFunc done 0aa6e79a-52bf-4411-ae3e-d32e4b984c41
2024-09-18 01:04:35.000 [info] CURSOR LOG: restFunc initiated 704e5cfd-7994-455c-af66-e1774a2c5b9e
2024-09-18 01:04:35.618 [info] CURSOR LOG: Done streaming cpp with id 704e5cfd-7994-455c-af66-e1774a2c5b9e
2024-09-18 01:04:35.618 [info] CPP RT LOG: Time taken for streaming cpp 617.165283203125 with request 704e5cfd-7994-455c-af66-e1774a2c5b9e
2024-09-18 01:04:35.618 [info] CPP Request Log with id 704e5cfd-7994-455c-af66-e1774a2c5b9e
2024-09-18 01:04:35.618 [info] =======>Model input 
2024-09-18 01:04:35.618 [info] =======>Model output 
        } else {
            CourseTable.printCourseTable(assignedCourses);
        }
    }
2024-09-18 01:04:35.618 [info] =======>Debug stream time 130.82209000736475
2024-09-18 01:04:35.618 [info] =======>Debug ttft time 124.75690300017595
2024-09-18 01:04:35.619 [info] Average of latest 20 ttft time 149.29563309978693
2024-09-18 01:04:35.619 [info] Average of latest 20 stream time 161.44243570063264
2024-09-18 01:04:35.619 [info] Average of latest 20 total time NaN
2024-09-18 01:04:35.619 [info] Average of latest 20 client time 696.5494506835937
2024-09-18 01:04:35.619 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:04:35.619 [info] CPP RT LOG: All stats {"streamingtime":617.165283203125,"actualTtftFromStart":669.25146484375,"timeTillServerRequest":52.35009765625,"requestToTtft":616.9013671875,"totalTime":669.491455078125}
2024-09-18 01:04:35.619 [info] CURSOR LOG: restFunc done 704e5cfd-7994-455c-af66-e1774a2c5b9e
2024-09-18 01:07:00.153 [info] CURSOR LOG: restFunc initiated bfb14243-22ff-4cad-954c-c5d4336a1ab5
2024-09-18 01:07:00.898 [info] CURSOR LOG: Done streaming cpp with id bfb14243-22ff-4cad-954c-c5d4336a1ab5
2024-09-18 01:07:00.898 [info] CPP RT LOG: Time taken for streaming cpp 744.079345703125 with request bfb14243-22ff-4cad-954c-c5d4336a1ab5
2024-09-18 01:07:00.898 [info] CPP Request Log with id bfb14243-22ff-4cad-954c-c5d4336a1ab5
2024-09-18 01:07:00.898 [info] =======>Model input 
2024-09-18 01:07:00.898 [info] =======>Model output 
    private void viewAssignedCourses() {
        System.out.println("Assigned Courses:");
        CourseTable.printCourseTable(assignedCourses);
    }
2024-09-18 01:07:00.898 [info] =======>Debug stream time 119.30416199564934
2024-09-18 01:07:00.898 [info] =======>Debug ttft time 113.66269999742508
2024-09-18 01:07:00.899 [info] Average of latest 20 ttft time 150.1210991995409
2024-09-18 01:07:00.899 [info] Average of latest 20 stream time 160.08941780049355
2024-09-18 01:07:00.899 [info] Average of latest 20 total time NaN
2024-09-18 01:07:00.899 [info] Average of latest 20 client time 710.4842895507812
2024-09-18 01:07:00.899 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:07:00.899 [info] CPP RT LOG: All stats {"streamingtime":744.079345703125,"actualTtftFromStart":790.255859375,"timeTillServerRequest":50.929443359375,"requestToTtft":739.326416015625,"totalTime":794.982666015625}
2024-09-18 01:07:00.899 [info] CURSOR LOG: restFunc done bfb14243-22ff-4cad-954c-c5d4336a1ab5
2024-09-18 01:07:12.367 [info] CURSOR LOG: restFunc initiated 63a554ce-d7e3-4b31-9474-36702b8f4c10
2024-09-18 01:07:12.804 [info] CURSOR LOG: Done streaming cpp with id 63a554ce-d7e3-4b31-9474-36702b8f4c10
2024-09-18 01:07:12.804 [info] CPP RT LOG: Time taken for streaming cpp 436.935546875 with request 63a554ce-d7e3-4b31-9474-36702b8f4c10
2024-09-18 01:07:12.804 [info] CPP Request Log with id 63a554ce-d7e3-4b31-9474-36702b8f4c10
2024-09-18 01:07:12.804 [info] =======>Model input 
2024-09-18 01:07:12.804 [info] =======>Model output 
    public boolean logout() {
        System.out.println("#=---- Logging Out ----=#");
        return true;
    }
2024-09-18 01:07:12.804 [info] =======>Debug stream time 119.06404699385166
2024-09-18 01:07:12.804 [info] =======>Debug ttft time 110.65217999368906
2024-09-18 01:07:12.807 [info] Average of latest 20 ttft time 151.2039291990921
2024-09-18 01:07:12.807 [info] Average of latest 20 stream time 161.14666765015573
2024-09-18 01:07:12.807 [info] Average of latest 20 total time NaN
2024-09-18 01:07:12.807 [info] Average of latest 20 client time 710.9903564453125
2024-09-18 01:07:12.807 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:07:12.807 [info] CPP RT LOG: All stats {"streamingtime":436.935546875,"actualTtftFromStart":481.148193359375,"timeTillServerRequest":51.64404296875,"requestToTtft":429.504150390625,"totalTime":488.556396484375}
2024-09-18 01:07:12.807 [info] CURSOR LOG: restFunc done 63a554ce-d7e3-4b31-9474-36702b8f4c10
2024-09-18 01:09:19.938 [info] CURSOR LOG: restFunc initiated 22ca9963-9d14-4955-b9e6-419a15355916
2024-09-18 01:09:20.834 [info] CURSOR LOG: Done streaming cpp with id 22ca9963-9d14-4955-b9e6-419a15355916
2024-09-18 01:09:20.834 [info] CPP RT LOG: Time taken for streaming cpp 895.062744140625 with request 22ca9963-9d14-4955-b9e6-419a15355916
2024-09-18 01:09:20.834 [info] CPP Request Log with id 22ca9963-9d14-4955-b9e6-419a15355916
2024-09-18 01:09:20.834 [info] =======>Model input 
2024-09-18 01:09:20.834 [info] =======>Model output 
        System.out.print("Enter the course code to register: ");
        String courseCode = scanner.nextLine();
        Course course = courseCatalog.getCourse(courseCode);
        
2024-09-18 01:09:20.834 [info] =======>Debug stream time 141.81999200582504
2024-09-18 01:09:20.834 [info] =======>Debug ttft time 133.68689899891615
2024-09-18 01:09:20.835 [info] Average of latest 20 ttft time 153.17415754888208
2024-09-18 01:09:20.835 [info] Average of latest 20 stream time 163.1788394505158
2024-09-18 01:09:20.835 [info] Average of latest 20 total time NaN
2024-09-18 01:09:20.835 [info] Average of latest 20 client time 732.565625
2024-09-18 01:09:20.835 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:20.835 [info] CPP RT LOG: All stats {"streamingtime":895.062744140625,"actualTtftFromStart":951.48095703125,"timeTillServerRequest":56.65283203125,"requestToTtft":894.828125,"totalTime":951.6865234375}
2024-09-18 01:09:20.835 [info] CURSOR LOG: restFunc done 22ca9963-9d14-4955-b9e6-419a15355916
2024-09-18 01:09:23.948 [info] CURSOR LOG: restFunc initiated d378fbac-5f96-47bd-bbea-7c390deb344d
2024-09-18 01:09:24.863 [info] CURSOR LOG: Done streaming cpp with id d378fbac-5f96-47bd-bbea-7c390deb344d
2024-09-18 01:09:24.863 [info] CPP RT LOG: Time taken for streaming cpp 914.898681640625 with request d378fbac-5f96-47bd-bbea-7c390deb344d
2024-09-18 01:09:24.864 [info] CPP Request Log with id d378fbac-5f96-47bd-bbea-7c390deb344d
2024-09-18 01:09:24.864 [info] =======>Model input 
2024-09-18 01:09:24.864 [info] =======>Model output 
        }
    }

    private void filterComplaintsByDate(Scanner scanner, List<Complaint> complaints) {
2024-09-18 01:09:24.864 [info] =======>Debug stream time 157.03547099977732
2024-09-18 01:09:24.864 [info] =======>Debug ttft time 145.52868899703026
2024-09-18 01:09:24.870 [info] Average of latest 20 ttft time 155.1070061987266
2024-09-18 01:09:24.870 [info] Average of latest 20 stream time 165.36575745064766
2024-09-18 01:09:24.870 [info] Average of latest 20 total time NaN
2024-09-18 01:09:24.870 [info] Average of latest 20 client time 756.5602661132813
2024-09-18 01:09:24.870 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:24.870 [info] CPP RT LOG: All stats {"streamingtime":914.898681640625,"actualTtftFromStart":967.671142578125,"timeTillServerRequest":65.172607421875,"requestToTtft":902.49853515625,"totalTime":980.050537109375}
2024-09-18 01:09:24.870 [info] CURSOR LOG: restFunc done d378fbac-5f96-47bd-bbea-7c390deb344d
2024-09-18 01:09:47.227 [info] CURSOR LOG: restFunc initiated 3fe44a0f-e27e-44d6-9b01-a9dd356dd065
2024-09-18 01:09:47.772 [info] CURSOR LOG: Done streaming cpp with id 3fe44a0f-e27e-44d6-9b01-a9dd356dd065
2024-09-18 01:09:47.772 [info] CPP RT LOG: Time taken for streaming cpp 545.116943359375 with request 3fe44a0f-e27e-44d6-9b01-a9dd356dd065
2024-09-18 01:09:47.773 [info] CPP Request Log with id 3fe44a0f-e27e-44d6-9b01-a9dd356dd065
2024-09-18 01:09:47.773 [info] =======>Model input 
2024-09-18 01:09:47.773 [info] =======>Model output 
                case 2:
                    System.out.println("#=---- Update Complaint Status ----=#");
                    updateComplaintStatus(scanner, complaints);
                    break;
2024-09-18 01:09:47.773 [info] =======>Debug stream time 181.39266099780798
2024-09-18 01:09:47.773 [info] =======>Debug ttft time 178.49606899917126
2024-09-18 01:09:47.773 [info] Average of latest 20 ttft time 157.6967913987115
2024-09-18 01:09:47.773 [info] Average of latest 20 stream time 167.48826115038247
2024-09-18 01:09:47.773 [info] Average of latest 20 total time NaN
2024-09-18 01:09:47.773 [info] Average of latest 20 client time 711.058203125
2024-09-18 01:09:47.773 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:47.773 [info] CPP RT LOG: All stats {"streamingtime":545.116943359375,"actualTtftFromStart":594.847412109375,"timeTillServerRequest":52.59912109375,"requestToTtft":542.248291015625,"totalTime":597.670166015625}
2024-09-18 01:09:47.773 [info] CURSOR LOG: restFunc done 3fe44a0f-e27e-44d6-9b01-a9dd356dd065
2024-09-18 01:09:48.855 [info] CURSOR LOG: restFunc initiated 5bab36a7-1987-423d-a5fa-51a3e05b0fda
2024-09-18 01:09:49.374 [info] CURSOR LOG: Done streaming cpp with id 5bab36a7-1987-423d-a5fa-51a3e05b0fda
2024-09-18 01:09:49.374 [info] CPP RT LOG: Time taken for streaming cpp 518.178466796875 with request 5bab36a7-1987-423d-a5fa-51a3e05b0fda
2024-09-18 01:09:49.374 [info] CPP Request Log with id 5bab36a7-1987-423d-a5fa-51a3e05b0fda
2024-09-18 01:09:49.374 [info] =======>Model input 
2024-09-18 01:09:49.374 [info] =======>Model output 
        System.out.print("Enter the course code to register: ");
        String courseCode = scanner.nextLine();
        Course course = courseCatalog.getCourse(courseCode);
        
2024-09-18 01:09:49.374 [info] =======>Debug stream time 139.49658499658108
2024-09-18 01:09:49.374 [info] =======>Debug ttft time 128.71750599890947
2024-09-18 01:09:49.375 [info] Average of latest 20 ttft time 153.62928384859114
2024-09-18 01:09:49.375 [info] Average of latest 20 stream time 163.555677450262
2024-09-18 01:09:49.375 [info] Average of latest 20 total time NaN
2024-09-18 01:09:49.375 [info] Average of latest 20 client time 706.1751708984375
2024-09-18 01:09:49.375 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:49.375 [info] CPP RT LOG: All stats {"streamingtime":518.178466796875,"actualTtftFromStart":569.707763671875,"timeTillServerRequest":51.746826171875,"requestToTtft":517.9609375,"totalTime":569.90576171875}
2024-09-18 01:09:49.375 [info] CURSOR LOG: restFunc done 5bab36a7-1987-423d-a5fa-51a3e05b0fda
2024-09-18 01:09:50.667 [info] CURSOR LOG: restFunc initiated 85104bc3-ec63-4362-9d34-1ddeb1126003
2024-09-18 01:09:51.163 [info] CURSOR LOG: Done streaming cpp with id 85104bc3-ec63-4362-9d34-1ddeb1126003
2024-09-18 01:09:51.163 [info] CPP RT LOG: Time taken for streaming cpp 496.816650390625 with request 85104bc3-ec63-4362-9d34-1ddeb1126003
2024-09-18 01:09:51.163 [info] CPP Request Log with id 85104bc3-ec63-4362-9d34-1ddeb1126003
2024-09-18 01:09:51.163 [info] =======>Model input 
2024-09-18 01:09:51.163 [info] =======>Model output 

    public Professor(String name, String email, String id) {
        super(name, email, id);
        this.assignedCourses = new ArrayList<>();
2024-09-18 01:09:51.163 [info] =======>Debug stream time 136.74510499835014
2024-09-18 01:09:51.163 [info] =======>Debug ttft time 131.66420299559832
2024-09-18 01:09:51.164 [info] Average of latest 20 ttft time 150.83364624809474
2024-09-18 01:09:51.164 [info] Average of latest 20 stream time 160.90231264997274
2024-09-18 01:09:51.164 [info] Average of latest 20 total time NaN
2024-09-18 01:09:51.164 [info] Average of latest 20 client time 705.0910034179688
2024-09-18 01:09:51.164 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:51.164 [info] CPP RT LOG: All stats {"streamingtime":496.816650390625,"actualTtftFromStart":544.576416015625,"timeTillServerRequest":53.35498046875,"requestToTtft":491.221435546875,"totalTime":550.148193359375}
2024-09-18 01:09:51.164 [info] CURSOR LOG: restFunc done 85104bc3-ec63-4362-9d34-1ddeb1126003
2024-09-18 01:09:52.272 [info] CURSOR LOG: restFunc initiated 76c0b346-9dc2-4ea3-bf4a-1bf994654e78
2024-09-18 01:09:52.856 [info] CURSOR LOG: Done streaming cpp with id 76c0b346-9dc2-4ea3-bf4a-1bf994654e78
2024-09-18 01:09:52.856 [info] CPP RT LOG: Time taken for streaming cpp 582.802490234375 with request 76c0b346-9dc2-4ea3-bf4a-1bf994654e78
2024-09-18 01:09:52.856 [info] CPP Request Log with id 76c0b346-9dc2-4ea3-bf4a-1bf994654e78
2024-09-18 01:09:52.856 [info] =======>Model input 
2024-09-18 01:09:52.856 [info] =======>Model output 
        addCourse(new Course("ESC207", "Ecology, Evolution, and Environment", 2, 4, "D. K. Sharma (V)", "BIO101", 70, "09:00-11:00"));

        for (Course course : courses.values()) {
            course.setSyllabus(generateRandomSyllabus(course.getCode()));
2024-09-18 01:09:52.856 [info] =======>Debug stream time 200.62192000448704
2024-09-18 01:09:52.856 [info] =======>Debug ttft time 197.11039500683546
2024-09-18 01:09:52.857 [info] Average of latest 20 ttft time 154.49746279846877
2024-09-18 01:09:52.857 [info] Average of latest 20 stream time 164.25378370005637
2024-09-18 01:09:52.857 [info] Average of latest 20 total time NaN
2024-09-18 01:09:52.857 [info] Average of latest 20 client time 710.691162109375
2024-09-18 01:09:52.857 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:52.857 [info] CPP RT LOG: All stats {"streamingtime":582.802490234375,"actualTtftFromStart":636.260009765625,"timeTillServerRequest":53.65283203125,"requestToTtft":582.607177734375,"totalTime":636.441650390625}
2024-09-18 01:09:52.857 [info] CURSOR LOG: restFunc done 76c0b346-9dc2-4ea3-bf4a-1bf994654e78
2024-09-18 01:09:53.506 [info] CURSOR LOG: restFunc initiated fbede3cd-b613-42e6-9242-fab1a08a8033
2024-09-18 01:09:53.979 [info] CURSOR LOG: Done streaming cpp with id fbede3cd-b613-42e6-9242-fab1a08a8033
2024-09-18 01:09:53.979 [info] CPP RT LOG: Time taken for streaming cpp 473.25048828125 with request fbede3cd-b613-42e6-9242-fab1a08a8033
2024-09-18 01:09:53.980 [info] CPP Request Log with id fbede3cd-b613-42e6-9242-fab1a08a8033
2024-09-18 01:09:53.980 [info] =======>Model input 
2024-09-18 01:09:53.980 [info] =======>Model output 
                "Code", "Course Name", "Professor", "Credits", "Schedule", "Office Hours", "Enrollment Limit");
        System.out.println("-".repeat(150));

        for (int i = 0; i < courses.size(); i++) {
2024-09-18 01:09:53.980 [info] =======>Debug stream time 114.73307199776173
2024-09-18 01:09:53.980 [info] =======>Debug ttft time 98.38076899945736
2024-09-18 01:09:53.980 [info] Average of latest 20 ttft time 154.87066759839655
2024-09-18 01:09:53.980 [info] Average of latest 20 stream time 165.14846809990703
2024-09-18 01:09:53.980 [info] Average of latest 20 total time NaN
2024-09-18 01:09:53.980 [info] Average of latest 20 client time 711.0317749023437
2024-09-18 01:09:53.980 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:53.980 [info] CPP RT LOG: All stats {"streamingtime":473.25048828125,"actualTtftFromStart":524.100341796875,"timeTillServerRequest":51.006103515625,"requestToTtft":473.09423828125,"totalTime":524.23046875}
2024-09-18 01:09:53.980 [info] CURSOR LOG: restFunc done fbede3cd-b613-42e6-9242-fab1a08a8033
2024-09-18 01:09:54.461 [info] CURSOR LOG: restFunc initiated e7ebc473-ac77-4566-999e-8bb7861d934c
2024-09-18 01:09:55.002 [info] CURSOR LOG: Done streaming cpp with id e7ebc473-ac77-4566-999e-8bb7861d934c
2024-09-18 01:09:55.002 [info] CPP RT LOG: Time taken for streaming cpp 540.53955078125 with request e7ebc473-ac77-4566-999e-8bb7861d934c
2024-09-18 01:09:55.002 [info] CPP Request Log with id e7ebc473-ac77-4566-999e-8bb7861d934c
2024-09-18 01:09:55.002 [info] =======>Model input 
2024-09-18 01:09:55.002 [info] =======>Model output 
    public String toString() {
        return "Course: " + code + " - " + title + " (" + credits + " credits, Semester " + semester + ")";
    }

2024-09-18 01:09:55.002 [info] =======>Debug stream time 157.6661130040884
2024-09-18 01:09:55.002 [info] =======>Debug ttft time 148.73981400579214
2024-09-18 01:09:55.003 [info] Average of latest 20 ttft time 152.84589274860917
2024-09-18 01:09:55.003 [info] Average of latest 20 stream time 163.45462024994194
2024-09-18 01:09:55.003 [info] Average of latest 20 total time NaN
2024-09-18 01:09:55.003 [info] Average of latest 20 client time 707.8880859375
2024-09-18 01:09:55.003 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:55.003 [info] CPP RT LOG: All stats {"streamingtime":540.53955078125,"actualTtftFromStart":592.7724609375,"timeTillServerRequest":52.569580078125,"requestToTtft":540.202880859375,"totalTime":593.082275390625}
2024-09-18 01:09:55.003 [info] CURSOR LOG: restFunc done e7ebc473-ac77-4566-999e-8bb7861d934c
2024-09-18 01:09:55.948 [info] CURSOR LOG: restFunc initiated 4d3caa62-b9f0-4830-943e-6c8bab67fafd
2024-09-18 01:09:56.541 [info] CURSOR LOG: Done streaming cpp with id 4d3caa62-b9f0-4830-943e-6c8bab67fafd
2024-09-18 01:09:56.541 [info] CPP RT LOG: Time taken for streaming cpp 593.34326171875 with request 4d3caa62-b9f0-4830-943e-6c8bab67fafd
2024-09-18 01:09:56.541 [info] CPP Request Log with id 4d3caa62-b9f0-4830-943e-6c8bab67fafd
2024-09-18 01:09:56.541 [info] =======>Model input 
2024-09-18 01:09:56.542 [info] =======>Model output 
            System.out.println("9. Logout");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
2024-09-18 01:09:56.542 [info] =======>Debug stream time 168.46350300312042
2024-09-18 01:09:56.542 [info] =======>Debug ttft time 159.57407300174236
2024-09-18 01:09:56.542 [info] Average of latest 20 ttft time 153.71827964894473
2024-09-18 01:09:56.542 [info] Average of latest 20 stream time 164.38185700029135
2024-09-18 01:09:56.542 [info] Average of latest 20 total time NaN
2024-09-18 01:09:56.542 [info] Average of latest 20 client time 707.055126953125
2024-09-18 01:09:56.542 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:56.542 [info] CPP RT LOG: All stats {"streamingtime":593.34326171875,"actualTtftFromStart":645.814208984375,"timeTillServerRequest":52.663330078125,"requestToTtft":593.15087890625,"totalTime":645.972412109375}
2024-09-18 01:09:56.542 [info] CURSOR LOG: restFunc done 4d3caa62-b9f0-4830-943e-6c8bab67fafd
2024-09-18 01:09:56.808 [info] CURSOR LOG: restFunc initiated ce478b99-ae92-43c0-9f00-10a04e03cbb3
2024-09-18 01:09:57.388 [info] CURSOR LOG: Done streaming cpp with id ce478b99-ae92-43c0-9f00-10a04e03cbb3
2024-09-18 01:09:57.388 [info] CPP RT LOG: Time taken for streaming cpp 580.943603515625 with request ce478b99-ae92-43c0-9f00-10a04e03cbb3
2024-09-18 01:09:57.388 [info] CPP Request Log with id ce478b99-ae92-43c0-9f00-10a04e03cbb3
2024-09-18 01:09:57.388 [info] =======>Model input 
2024-09-18 01:09:57.388 [info] =======>Model output 
public abstract class User {
    protected String name;
    protected String email;
2024-09-18 01:09:57.388 [info] =======>Debug stream time 179.31198599934578
2024-09-18 01:09:57.388 [info] =======>Debug ttft time 172.51257199794054
2024-09-18 01:09:57.389 [info] Average of latest 20 ttft time 157.65075119882823
2024-09-18 01:09:57.389 [info] Average of latest 20 stream time 168.4543969001621
2024-09-18 01:09:57.389 [info] Average of latest 20 total time NaN
2024-09-18 01:09:57.389 [info] Average of latest 20 client time 710.182421875
2024-09-18 01:09:57.389 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:57.389 [info] CPP RT LOG: All stats {"streamingtime":580.943603515625,"actualTtftFromStart":631.487060546875,"timeTillServerRequest":50.84228515625,"requestToTtft":580.644775390625,"totalTime":631.74462890625}
2024-09-18 01:09:57.389 [info] CURSOR LOG: restFunc done ce478b99-ae92-43c0-9f00-10a04e03cbb3
2024-09-18 01:09:58.259 [info] CURSOR LOG: restFunc initiated ad93cdf6-230e-41fe-967a-43d16c22a9a4
2024-09-18 01:09:58.792 [info] CURSOR LOG: Done streaming cpp with id ad93cdf6-230e-41fe-967a-43d16c22a9a4
2024-09-18 01:09:58.793 [info] CPP RT LOG: Time taken for streaming cpp 533.27099609375 with request ad93cdf6-230e-41fe-967a-43d16c22a9a4
2024-09-18 01:09:58.793 [info] CPP Request Log with id ad93cdf6-230e-41fe-967a-43d16c22a9a4
2024-09-18 01:09:58.793 [info] =======>Model input 
2024-09-18 01:09:58.793 [info] =======>Model output 
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
2024-09-18 01:09:58.793 [info] =======>Debug stream time 166.59172900021076
2024-09-18 01:09:58.793 [info] =======>Debug ttft time 159.87404299527407
2024-09-18 01:09:58.793 [info] Average of latest 20 ttft time 160.33685374855995
2024-09-18 01:09:58.793 [info] Average of latest 20 stream time 171.2316860500723
2024-09-18 01:09:58.793 [info] Average of latest 20 total time NaN
2024-09-18 01:09:58.793 [info] Average of latest 20 client time 714.3045776367187
2024-09-18 01:09:58.793 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:58.793 [info] CPP RT LOG: All stats {"streamingtime":533.27099609375,"actualTtftFromStart":614.2978515625,"timeTillServerRequest":81.16015625,"requestToTtft":533.1376953125,"totalTime":614.40869140625}
2024-09-18 01:09:58.793 [info] CURSOR LOG: restFunc done ad93cdf6-230e-41fe-967a-43d16c22a9a4
2024-09-18 01:09:59.461 [info] CURSOR LOG: restFunc initiated bfaa29b7-67e1-4320-9b3c-884f19e4ad6b
2024-09-18 01:09:59.989 [info] CURSOR LOG: Done streaming cpp with id bfaa29b7-67e1-4320-9b3c-884f19e4ad6b
2024-09-18 01:09:59.989 [info] CPP RT LOG: Time taken for streaming cpp 527.053955078125 with request bfaa29b7-67e1-4320-9b3c-884f19e4ad6b
2024-09-18 01:09:59.989 [info] CPP Request Log with id bfaa29b7-67e1-4320-9b3c-884f19e4ad6b
2024-09-18 01:09:59.989 [info] =======>Model input 
2024-09-18 01:09:59.989 [info] =======>Model output 
        addStudent("2022091", "123", "Ayush Kumar", "ayush@iiitd.ac.in", "CSAI");
        addStudent("2022092", "123", "Anusk Kumar", "anushk@iiitd.ac.in", "CSE");
        addProfessor("1968", "123", "Sambuddho Chakravarty", "sambuddho@iiitd.ac.in");
        addProfessor("1992", "123", "Satish Pandey", "satish@iiitd.ac.in");
2024-09-18 01:09:59.989 [info] =======>Debug stream time 202.78039200231433
2024-09-18 01:09:59.989 [info] =======>Debug ttft time 198.21496300026774
2024-09-18 01:09:59.989 [info] Average of latest 20 ttft time 160.41850904878228
2024-09-18 01:09:59.989 [info] Average of latest 20 stream time 168.13985340017825
2024-09-18 01:09:59.989 [info] Average of latest 20 total time NaN
2024-09-18 01:09:59.990 [info] Average of latest 20 client time 674.7038818359375
2024-09-18 01:09:59.990 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:09:59.990 [info] CPP RT LOG: All stats {"streamingtime":527.053955078125,"actualTtftFromStart":579.454833984375,"timeTillServerRequest":52.536865234375,"requestToTtft":526.91796875,"totalTime":579.571533203125}
2024-09-18 01:09:59.990 [info] CURSOR LOG: restFunc done bfaa29b7-67e1-4320-9b3c-884f19e4ad6b
2024-09-18 01:11:43.132 [info] CURSOR LOG: restFunc initiated d39870d5-ebe4-45b9-a314-aa7d54897f78
2024-09-18 01:11:43.910 [info] CURSOR LOG: Done streaming cpp with id d39870d5-ebe4-45b9-a314-aa7d54897f78
2024-09-18 01:11:43.910 [info] CPP RT LOG: Time taken for streaming cpp 777.402099609375 with request d39870d5-ebe4-45b9-a314-aa7d54897f78
2024-09-18 01:11:43.911 [info] CPP Request Log with id d39870d5-ebe4-45b9-a314-aa7d54897f78
2024-09-18 01:11:43.911 [info] =======>Model input 
2024-09-18 01:11:43.911 [info] =======>Model output 
    }
}
2024-09-18 01:11:43.911 [info] =======>Debug stream time 139.09331700205803
2024-09-18 01:11:43.911 [info] =======>Debug ttft time 129.69445400685072
2024-09-18 01:11:43.911 [info] Average of latest 20 ttft time 159.35709954928606
2024-09-18 01:11:43.911 [info] Average of latest 20 stream time 167.09789975043387
2024-09-18 01:11:43.911 [info] Average of latest 20 total time NaN
2024-09-18 01:11:43.911 [info] Average of latest 20 client time 684.6382446289062
2024-09-18 01:11:43.911 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:11:43.911 [info] CPP RT LOG: All stats {"streamingtime":777.402099609375,"actualTtftFromStart":1280.7216796875,"timeTillServerRequest":514.2490234375,"requestToTtft":766.47265625,"totalTime":1291.631103515625}
2024-09-18 01:11:43.911 [info] CURSOR LOG: restFunc done d39870d5-ebe4-45b9-a314-aa7d54897f78
2024-09-18 01:12:09.401 [info] CURSOR LOG: restFunc initiated 02d60cdb-fc56-4bce-8446-903c62568968
2024-09-18 01:12:10.109 [info] CURSOR LOG: Done streaming cpp with id 02d60cdb-fc56-4bce-8446-903c62568968
2024-09-18 01:12:10.109 [info] CPP RT LOG: Time taken for streaming cpp 708.0986328125 with request 02d60cdb-fc56-4bce-8446-903c62568968
2024-09-18 01:12:10.109 [info] CPP Request Log with id 02d60cdb-fc56-4bce-8446-903c62568968
2024-09-18 01:12:10.109 [info] =======>Model input 
2024-09-18 01:12:10.109 [info] =======>Model output 
    }
}
2024-09-18 01:12:10.109 [info] =======>Debug stream time 243.21575900167227
2024-09-18 01:12:10.109 [info] =======>Debug ttft time 211.47910799831152
2024-09-18 01:12:10.109 [info] Average of latest 20 ttft time 162.68847434911876
2024-09-18 01:12:10.109 [info] Average of latest 20 stream time 171.74819620046765
2024-09-18 01:12:10.109 [info] Average of latest 20 total time NaN
2024-09-18 01:12:10.109 [info] Average of latest 20 client time 688.9299438476562
2024-09-18 01:12:10.109 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:12:10.109 [info] CPP RT LOG: All stats {"streamingtime":708.0986328125,"actualTtftFromStart":765.055419921875,"timeTillServerRequest":57.176025390625,"requestToTtft":707.87939453125,"totalTime":765.24755859375}
2024-09-18 01:12:10.109 [info] CURSOR LOG: restFunc done 02d60cdb-fc56-4bce-8446-903c62568968
2024-09-18 01:12:16.977 [info] CURSOR LOG: restFunc initiated 952d0231-deb6-4000-a326-82dcc09ec782
2024-09-18 01:12:17.486 [info] CURSOR LOG: Done streaming cpp with id 952d0231-deb6-4000-a326-82dcc09ec782
2024-09-18 01:12:17.487 [info] CPP RT LOG: Time taken for streaming cpp 508.9794921875 with request 952d0231-deb6-4000-a326-82dcc09ec782
2024-09-18 01:12:17.487 [info] CPP Request Log with id 952d0231-deb6-4000-a326-82dcc09ec782
2024-09-18 01:12:17.487 [info] =======>Model input 
2024-09-18 01:12:17.487 [info] =======>Model output 
    }
}
2024-09-18 01:12:17.487 [info] =======>Debug stream time 171.63989900052547
2024-09-18 01:12:17.487 [info] =======>Debug ttft time 162.43840400129557
2024-09-18 01:12:17.488 [info] Average of latest 20 ttft time 154.59534699935466
2024-09-18 01:12:17.488 [info] Average of latest 20 stream time 163.570218850486
2024-09-18 01:12:17.488 [info] Average of latest 20 total time NaN
2024-09-18 01:12:17.488 [info] Average of latest 20 client time 686.4863403320312
2024-09-18 01:12:17.488 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:12:17.488 [info] CPP RT LOG: All stats {"streamingtime":508.9794921875,"actualTtftFromStart":636.882080078125,"timeTillServerRequest":134.653076171875,"requestToTtft":502.22900390625,"totalTime":643.59814453125}
2024-09-18 01:12:17.488 [info] CURSOR LOG: restFunc done 952d0231-deb6-4000-a326-82dcc09ec782
2024-09-18 01:12:18.432 [info] CURSOR LOG: restFunc initiated 3330453a-9757-4ef1-9667-5caae1810bd8
2024-09-18 01:12:19.061 [info] CURSOR LOG: Done streaming cpp with id 3330453a-9757-4ef1-9667-5caae1810bd8
2024-09-18 01:12:19.061 [info] CPP RT LOG: Time taken for streaming cpp 628.90966796875 with request 3330453a-9757-4ef1-9667-5caae1810bd8
2024-09-18 01:12:19.061 [info] CPP Request Log with id 3330453a-9757-4ef1-9667-5caae1810bd8
2024-09-18 01:12:19.061 [info] =======>Model input 
2024-09-18 01:12:19.061 [info] =======>Model output 
    private void assignCoursesToProfessors() {
        Random random = new Random();
        for (Course course : courses.values()) {
            String professorName = course.getAssignedProfessor().getName();
            Professor professor = professors.get(professorName);
2024-09-18 01:12:19.061 [info] =======>Debug stream time 313.40559600293636
2024-09-18 01:12:19.061 [info] =======>Debug ttft time 146.21727599948645
2024-09-18 01:12:19.064 [info] Average of latest 20 ttft time 151.9629211993888
2024-09-18 01:12:19.064 [info] Average of latest 20 stream time 168.89390285070985
2024-09-18 01:12:19.064 [info] Average of latest 20 total time NaN
2024-09-18 01:12:19.064 [info] Average of latest 20 client time 651.4103881835938
2024-09-18 01:12:19.064 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:12:19.064 [info] CPP RT LOG: All stats {"streamingtime":628.90966796875,"actualTtftFromStart":592.305419921875,"timeTillServerRequest":51.884765625,"requestToTtft":540.420654296875,"totalTime":680.77197265625}
2024-09-18 01:12:19.064 [info] CURSOR LOG: restFunc done 3330453a-9757-4ef1-9667-5caae1810bd8
2024-09-18 01:12:21.173 [info] CURSOR LOG: restFunc initiated 7fcdb13b-b71b-4f44-ac2a-97dbabdcaf6c
2024-09-18 01:12:21.664 [info] CURSOR LOG: Done streaming cpp with id 7fcdb13b-b71b-4f44-ac2a-97dbabdcaf6c
2024-09-18 01:12:21.664 [info] CPP RT LOG: Time taken for streaming cpp 490.875244140625 with request 7fcdb13b-b71b-4f44-ac2a-97dbabdcaf6c
2024-09-18 01:12:21.664 [info] CPP Request Log with id 7fcdb13b-b71b-4f44-ac2a-97dbabdcaf6c
2024-09-18 01:12:21.664 [info] =======>Model input 
2024-09-18 01:12:21.664 [info] =======>Model output 
            if (professor != null) {
                professor.addAssignedCourse(course);
                course.assignProfessor(professor);
            }
2024-09-18 01:12:21.664 [info] =======>Debug stream time 134.74265299737453
2024-09-18 01:12:21.664 [info] =======>Debug ttft time 131.2089099958539
2024-09-18 01:12:21.665 [info] Average of latest 20 ttft time 149.13049649950116
2024-09-18 01:12:21.665 [info] Average of latest 20 stream time 165.89730260055512
2024-09-18 01:12:21.665 [info] Average of latest 20 total time NaN
2024-09-18 01:12:21.665 [info] Average of latest 20 client time 605.6861572265625
2024-09-18 01:12:21.665 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:12:21.665 [info] CPP RT LOG: All stats {"streamingtime":490.875244140625,"actualTtftFromStart":548.893798828125,"timeTillServerRequest":60.696533203125,"requestToTtft":488.197265625,"totalTime":551.543701171875}
2024-09-18 01:12:21.665 [info] CURSOR LOG: restFunc done 7fcdb13b-b71b-4f44-ac2a-97dbabdcaf6c
2024-09-18 01:13:11.232 [info] CURSOR LOG: restFunc initiated a1712281-7a49-407d-a7d0-af096a37f1aa
2024-09-18 01:13:11.716 [info] CURSOR LOG: Done streaming cpp with id a1712281-7a49-407d-a7d0-af096a37f1aa
2024-09-18 01:13:11.716 [info] CPP RT LOG: Time taken for streaming cpp 484.0068359375 with request a1712281-7a49-407d-a7d0-af096a37f1aa
2024-09-18 01:13:11.716 [info] CPP Request Log with id a1712281-7a49-407d-a7d0-af096a37f1aa
2024-09-18 01:13:11.716 [info] =======>Model input 
2024-09-18 01:13:11.716 [info] =======>Model output 

    public Professor(String name, String email, String id) {
        super(name, email, id);
        this.assignedCourses = new ArrayList<>();
2024-09-18 01:13:11.716 [info] =======>Debug stream time 122.31155500560999
2024-09-18 01:13:11.716 [info] =======>Debug ttft time 114.71601400524378
2024-09-18 01:13:11.717 [info] Average of latest 20 ttft time 148.62845204975457
2024-09-18 01:13:11.717 [info] Average of latest 20 stream time 165.4717758504674
2024-09-18 01:13:11.717 [info] Average of latest 20 total time NaN
2024-09-18 01:13:11.717 [info] Average of latest 20 client time 599.0282348632812
2024-09-18 01:13:11.717 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:13:11.717 [info] CPP RT LOG: All stats {"streamingtime":484.0068359375,"actualTtftFromStart":542.8017578125,"timeTillServerRequest":59.26318359375,"requestToTtft":483.53857421875,"totalTime":543.2392578125}
2024-09-18 01:13:11.717 [info] CURSOR LOG: restFunc done a1712281-7a49-407d-a7d0-af096a37f1aa
2024-09-18 01:13:16.381 [info] CURSOR LOG: restFunc initiated eed8f7e8-832d-40be-992d-5c56157e0f27
2024-09-18 01:13:16.797 [info] CURSOR LOG: Done streaming cpp with id eed8f7e8-832d-40be-992d-5c56157e0f27
2024-09-18 01:13:16.797 [info] CPP RT LOG: Time taken for streaming cpp 415.95654296875 with request eed8f7e8-832d-40be-992d-5c56157e0f27
2024-09-18 01:13:16.797 [info] CPP Request Log with id eed8f7e8-832d-40be-992d-5c56157e0f27
2024-09-18 01:13:16.797 [info] =======>Model input 
2024-09-18 01:13:16.797 [info] =======>Model output 
    public String toString() {
        return "Course: " + code + " - " + title + " (" + credits + " credits, Semester " + semester + ")";
    }

2024-09-18 01:13:16.797 [info] =======>Debug stream time 104.81334500014782
2024-09-18 01:13:16.797 [info] =======>Debug ttft time 99.50656699389219
2024-09-18 01:13:16.798 [info] Average of latest 20 ttft time 147.92064539957792
2024-09-18 01:13:16.798 [info] Average of latest 20 stream time 164.7472350006923
2024-09-18 01:13:16.798 [info] Average of latest 20 total time NaN
2024-09-18 01:13:16.798 [info] Average of latest 20 client time 582.6220947265625
2024-09-18 01:13:16.798 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:13:16.798 [info] CPP RT LOG: All stats {"streamingtime":415.95654296875,"actualTtftFromStart":491.1552734375,"timeTillServerRequest":75.410400390625,"requestToTtft":415.744873046875,"totalTime":491.32666015625}
2024-09-18 01:13:16.798 [info] CURSOR LOG: restFunc done eed8f7e8-832d-40be-992d-5c56157e0f27
2024-09-18 01:13:32.373 [info] CURSOR LOG: restFunc initiated 74529f8e-07ba-4e64-bcb0-308d96f8eee4
2024-09-18 01:13:32.910 [info] CURSOR LOG: Done streaming cpp with id 74529f8e-07ba-4e64-bcb0-308d96f8eee4
2024-09-18 01:13:32.910 [info] CPP RT LOG: Time taken for streaming cpp 538.016357421875 with request 74529f8e-07ba-4e64-bcb0-308d96f8eee4
2024-09-18 01:13:32.910 [info] CPP Request Log with id 74529f8e-07ba-4e64-bcb0-308d96f8eee4
2024-09-18 01:13:32.910 [info] =======>Model input 
2024-09-18 01:13:32.910 [info] =======>Model output 
    public void removeAssignedCourse(Course course) {
        assignedCourses.remove(course);
    }

2024-09-18 01:13:32.910 [info] =======>Debug stream time 115.0435920059681
2024-09-18 01:13:32.910 [info] =======>Debug ttft time 109.73761700093746
2024-09-18 01:13:32.911 [info] Average of latest 20 ttft time 147.87491724994032
2024-09-18 01:13:32.911 [info] Average of latest 20 stream time 164.54621225129813
2024-09-18 01:13:32.911 [info] Average of latest 20 total time NaN
2024-09-18 01:13:32.911 [info] Average of latest 20 client time 587.6761352539063
2024-09-18 01:13:32.911 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:13:32.911 [info] CPP RT LOG: All stats {"streamingtime":538.016357421875,"actualTtftFromStart":592.2119140625,"timeTillServerRequest":54.486328125,"requestToTtft":537.7255859375,"totalTime":592.449951171875}
2024-09-18 01:13:32.911 [info] CURSOR LOG: restFunc done 74529f8e-07ba-4e64-bcb0-308d96f8eee4
2024-09-18 01:13:36.572 [info] CURSOR LOG: restFunc initiated 98ef3687-7752-4985-bcd3-bb84076e7b88
2024-09-18 01:13:36.976 [info] CURSOR LOG: Done streaming cpp with id 98ef3687-7752-4985-bcd3-bb84076e7b88
2024-09-18 01:13:36.976 [info] CPP RT LOG: Time taken for streaming cpp 404.346435546875 with request 98ef3687-7752-4985-bcd3-bb84076e7b88
2024-09-18 01:13:36.977 [info] CPP Request Log with id 98ef3687-7752-4985-bcd3-bb84076e7b88
2024-09-18 01:13:36.977 [info] =======>Model input 
2024-09-18 01:13:36.977 [info] =======>Model output 
    public String toString() {
        return "Course: " + code + " - " + title + " (" + credits + " credits, Semester " + semester + ")";
    }

2024-09-18 01:13:36.977 [info] =======>Debug stream time 95.05429899692535
2024-09-18 01:13:36.977 [info] =======>Debug ttft time 85.04147399961948
2024-09-18 01:13:36.977 [info] Average of latest 20 ttft time 145.4426459999755
2024-09-18 01:13:36.977 [info] Average of latest 20 stream time 162.20792760085314
2024-09-18 01:13:36.977 [info] Average of latest 20 total time NaN
2024-09-18 01:13:36.977 [info] Average of latest 20 client time 563.1403198242188
2024-09-18 01:13:36.977 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:13:36.977 [info] CPP RT LOG: All stats {"streamingtime":404.346435546875,"actualTtftFromStart":445.150634765625,"timeTillServerRequest":52.59814453125,"requestToTtft":392.552490234375,"totalTime":456.9287109375}
2024-09-18 01:13:36.977 [info] CURSOR LOG: restFunc done 98ef3687-7752-4985-bcd3-bb84076e7b88
2024-09-18 01:13:37.376 [info] CURSOR LOG: restFunc initiated 4711fa37-f48f-4cb7-aab4-5c47e7a377c3
2024-09-18 01:13:37.852 [info] CURSOR LOG: Done streaming cpp with id 4711fa37-f48f-4cb7-aab4-5c47e7a377c3
2024-09-18 01:13:37.852 [info] CPP RT LOG: Time taken for streaming cpp 476.9189453125 with request 4711fa37-f48f-4cb7-aab4-5c47e7a377c3
2024-09-18 01:13:37.852 [info] CPP Request Log with id 4711fa37-f48f-4cb7-aab4-5c47e7a377c3
2024-09-18 01:13:37.852 [info] =======>Model input 
2024-09-18 01:13:37.852 [info] =======>Model output 
    }

    public List<Student> getEnrolledStudents() {
        return enrolledStudents;
2024-09-18 01:13:37.852 [info] =======>Debug stream time 112.05593299865723
2024-09-18 01:13:37.852 [info] =======>Debug ttft time 92.79252400249243
2024-09-18 01:13:37.859 [info] Average of latest 20 ttft time 142.8058377502486
2024-09-18 01:13:37.859 [info] Average of latest 20 stream time 159.95895070079715
2024-09-18 01:13:37.859 [info] Average of latest 20 total time NaN
2024-09-18 01:13:37.859 [info] Average of latest 20 client time 541.2413330078125
2024-09-18 01:13:37.859 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:13:37.859 [info] CPP RT LOG: All stats {"streamingtime":476.9189453125,"actualTtftFromStart":520.099609375,"timeTillServerRequest":52.038818359375,"requestToTtft":468.060791015625,"totalTime":528.89453125}
2024-09-18 01:13:37.859 [info] CURSOR LOG: restFunc done 4711fa37-f48f-4cb7-aab4-5c47e7a377c3
2024-09-18 01:14:11.162 [info] CURSOR LOG: restFunc initiated 6b7357a5-d7ac-44b7-b50c-d16b554a198e
2024-09-18 01:14:11.618 [info] CURSOR LOG: Done streaming cpp with id 6b7357a5-d7ac-44b7-b50c-d16b554a198e
2024-09-18 01:14:11.618 [info] CPP RT LOG: Time taken for streaming cpp 456.047607421875 with request 6b7357a5-d7ac-44b7-b50c-d16b554a198e
2024-09-18 01:14:11.618 [info] CPP Request Log with id 6b7357a5-d7ac-44b7-b50c-d16b554a198e
2024-09-18 01:14:11.618 [info] =======>Model input 
2024-09-18 01:14:11.618 [info] =======>Model output 
    }

    @Override
    public String toString() {
2024-09-18 01:14:11.618 [info] =======>Debug stream time 80.1021030023694
2024-09-18 01:14:11.618 [info] =======>Debug ttft time 72.05490399897099
2024-09-18 01:14:11.619 [info] Average of latest 20 ttft time 137.4837795002386
2024-09-18 01:14:11.619 [info] Average of latest 20 stream time 154.8944228010252
2024-09-18 01:14:11.619 [info] Average of latest 20 total time NaN
2024-09-18 01:14:11.619 [info] Average of latest 20 client time 536.7878662109375
2024-09-18 01:14:11.619 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:14:11.619 [info] CPP RT LOG: All stats {"streamingtime":456.047607421875,"actualTtftFromStart":508.38818359375,"timeTillServerRequest":52.57568359375,"requestToTtft":455.8125,"totalTime":508.5859375}
2024-09-18 01:14:11.619 [info] CURSOR LOG: restFunc done 6b7357a5-d7ac-44b7-b50c-d16b554a198e
2024-09-18 01:14:14.617 [info] CURSOR LOG: restFunc initiated 468ea181-417a-4916-b361-baff7e6ae693
2024-09-18 01:14:15.058 [info] CURSOR LOG: Done streaming cpp with id 468ea181-417a-4916-b361-baff7e6ae693
2024-09-18 01:14:15.058 [info] CPP RT LOG: Time taken for streaming cpp 440.884521484375 with request 468ea181-417a-4916-b361-baff7e6ae693
2024-09-18 01:14:15.059 [info] CPP Request Log with id 468ea181-417a-4916-b361-baff7e6ae693
2024-09-18 01:14:15.059 [info] =======>Model input 
2024-09-18 01:14:15.059 [info] =======>Model output 
    }

    @Override
    public String toString() {
2024-09-18 01:14:15.059 [info] =======>Debug stream time 115.59121300280094
2024-09-18 01:14:15.059 [info] =======>Debug ttft time 103.84792499989271
2024-09-18 01:14:15.062 [info] Average of latest 20 ttft time 136.24030045028775
2024-09-18 01:14:15.062 [info] Average of latest 20 stream time 153.6991542013362
2024-09-18 01:14:15.062 [info] Average of latest 20 total time NaN
2024-09-18 01:14:15.062 [info] Average of latest 20 client time 532.9231689453125
2024-09-18 01:14:15.062 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:14:15.062 [info] CPP RT LOG: All stats {"streamingtime":440.884521484375,"actualTtftFromStart":483.391845703125,"timeTillServerRequest":51.74658203125,"requestToTtft":431.645263671875,"totalTime":492.60595703125}
2024-09-18 01:14:15.062 [info] CURSOR LOG: restFunc done 468ea181-417a-4916-b361-baff7e6ae693
2024-09-18 01:14:19.491 [info] CURSOR LOG: restFunc initiated 337809a1-80be-4963-9d4f-cbe8e7f19701
2024-09-18 01:14:19.944 [info] CURSOR LOG: restFunc initiated 539abb22-f510-4bd9-b301-72aa450d8cbb
2024-09-18 01:14:19.960 [info] CURSOR LOG: Done streaming cpp with id 337809a1-80be-4963-9d4f-cbe8e7f19701
2024-09-18 01:14:19.960 [info] CPP RT LOG: Time taken for streaming cpp 468.90869140625 with request 337809a1-80be-4963-9d4f-cbe8e7f19701
2024-09-18 01:14:19.960 [info] CPP Request Log with id 337809a1-80be-4963-9d4f-cbe8e7f19701
2024-09-18 01:14:19.960 [info] =======>Model input 
2024-09-18 01:14:19.960 [info] =======>Model output 
    public void removeAssignedCourse(Course course) {
        assignedCourses.remove(course);
    }

2024-09-18 01:14:19.960 [info] =======>Debug stream time 92.92737599462271
2024-09-18 01:14:19.960 [info] =======>Debug ttft time 87.70271399617195
2024-09-18 01:14:19.960 [info] Average of latest 20 ttft time 134.04222600031645
2024-09-18 01:14:19.960 [info] Average of latest 20 stream time 151.50826775114984
2024-09-18 01:14:19.960 [info] Average of latest 20 total time NaN
2024-09-18 01:14:19.960 [info] Average of latest 20 client time 531.5277709960938
2024-09-18 01:14:19.960 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:14:19.960 [info] CPP RT LOG: All stats {"streamingtime":468.90869140625,"actualTtftFromStart":519.315673828125,"timeTillServerRequest":50.541748046875,"requestToTtft":468.77392578125,"totalTime":519.432373046875}
2024-09-18 01:14:19.960 [info] CURSOR LOG: restFunc done 337809a1-80be-4963-9d4f-cbe8e7f19701
2024-09-18 01:14:20.245 [info] CURSOR LOG: Done streaming cpp with id 539abb22-f510-4bd9-b301-72aa450d8cbb
2024-09-18 01:14:20.245 [info] CPP RT LOG: Time taken for streaming cpp 301.591064453125 with request 539abb22-f510-4bd9-b301-72aa450d8cbb
2024-09-18 01:14:20.245 [info] CPP Request Log with id 539abb22-f510-4bd9-b301-72aa450d8cbb
2024-09-18 01:14:20.245 [info] =======>Model input 
2024-09-18 01:14:20.245 [info] =======>Model output 
    }

    public void addAssignedCourse(Course course) {
        assignedCourses.add(course);
2024-09-18 01:14:20.245 [info] =======>Debug stream time 113.7660750001669
2024-09-18 01:14:20.245 [info] =======>Debug ttft time 106.20246700197458
2024-09-18 01:14:20.245 [info] Average of latest 20 ttft time 129.4968296000734
2024-09-18 01:14:20.245 [info] Average of latest 20 stream time 147.16547550093384
2024-09-18 01:14:20.245 [info] Average of latest 20 total time NaN
2024-09-18 01:14:20.245 [info] Average of latest 20 client time 517.4671997070312
2024-09-18 01:14:20.245 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:14:20.245 [info] CPP RT LOG: All stats {"streamingtime":301.591064453125,"actualTtftFromStart":344.0283203125,"timeTillServerRequest":51.152587890625,"requestToTtft":292.875732421875,"totalTime":352.69775390625}
2024-09-18 01:14:20.245 [info] CURSOR LOG: restFunc done 539abb22-f510-4bd9-b301-72aa450d8cbb
2024-09-18 01:14:22.832 [info] CURSOR LOG: restFunc initiated e7e5af0f-0b2e-4183-a97d-dc7abf653b81
2024-09-18 01:14:23.325 [info] CURSOR LOG: Done streaming cpp with id e7e5af0f-0b2e-4183-a97d-dc7abf653b81
2024-09-18 01:14:23.325 [info] CPP RT LOG: Time taken for streaming cpp 493.212158203125 with request e7e5af0f-0b2e-4183-a97d-dc7abf653b81
2024-09-18 01:14:23.326 [info] CPP Request Log with id e7e5af0f-0b2e-4183-a97d-dc7abf653b81
2024-09-18 01:14:23.326 [info] =======>Model input 
2024-09-18 01:14:23.326 [info] =======>Model output 
    }

    public void addAssignedCourse(Course course) {
        assignedCourses.add(course);
2024-09-18 01:14:23.326 [info] =======>Debug stream time 129.84152799844742
2024-09-18 01:14:23.326 [info] =======>Debug ttft time 120.09243299812078
2024-09-18 01:14:23.326 [info] Average of latest 20 ttft time 130.58241280000658
2024-09-18 01:14:23.326 [info] Average of latest 20 stream time 147.9208983009681
2024-09-18 01:14:23.326 [info] Average of latest 20 total time NaN
2024-09-18 01:14:23.326 [info] Average of latest 20 client time 518.465283203125
2024-09-18 01:14:23.326 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:14:23.326 [info] CPP RT LOG: All stats {"streamingtime":493.212158203125,"actualTtftFromStart":544.638671875,"timeTillServerRequest":51.677978515625,"requestToTtft":492.960693359375,"totalTime":544.867919921875}
2024-09-18 01:14:23.326 [info] CURSOR LOG: restFunc done e7e5af0f-0b2e-4183-a97d-dc7abf653b81
2024-09-18 01:15:20.953 [info] CURSOR LOG: restFunc initiated 30deebe4-b590-4862-a141-21ba7d31e46a
2024-09-18 01:15:21.780 [info] CURSOR LOG: Done streaming cpp with id 30deebe4-b590-4862-a141-21ba7d31e46a
2024-09-18 01:15:21.781 [info] CPP RT LOG: Time taken for streaming cpp 826.689453125 with request 30deebe4-b590-4862-a141-21ba7d31e46a
2024-09-18 01:15:21.781 [info] CPP Request Log with id 30deebe4-b590-4862-a141-21ba7d31e46a
2024-09-18 01:15:21.783 [info] =======>Model input 
2024-09-18 01:15:21.783 [info] =======>Model output 
                "Code", "Course Name", "Professor", "Credits", "Schedule", "Office Hours", "Enrollment Limit");
        System.out.println("-".repeat(150));

        for (int i = 0; i < courses.size(); i++) {
2024-09-18 01:15:21.783 [info] =======>Debug stream time 106.96508200466633
2024-09-18 01:15:21.783 [info] =======>Debug ttft time 102.58443800359964
2024-09-18 01:15:21.784 [info] Average of latest 20 ttft time 128.27464399989694
2024-09-18 01:15:21.784 [info] Average of latest 20 stream time 145.38584675099702
2024-09-18 01:15:21.784 [info] Average of latest 20 total time NaN
2024-09-18 01:15:21.784 [info] Average of latest 20 client time 532.7727783203125
2024-09-18 01:15:21.784 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:15:21.784 [info] CPP RT LOG: All stats {"streamingtime":826.689453125,"actualTtftFromStart":886.20703125,"timeTillServerRequest":61.8203125,"requestToTtft":824.38671875,"totalTime":888.494873046875}
2024-09-18 01:15:21.784 [info] CURSOR LOG: restFunc done 30deebe4-b590-4862-a141-21ba7d31e46a
2024-09-18 01:16:52.701 [info] CURSOR LOG: restFunc initiated ce2b19bc-55cc-49ee-bddb-1b6d4aaaaac6
2024-09-18 01:16:53.535 [info] CURSOR LOG: Done streaming cpp with id ce2b19bc-55cc-49ee-bddb-1b6d4aaaaac6
2024-09-18 01:16:53.535 [info] CPP RT LOG: Time taken for streaming cpp 833.23828125 with request ce2b19bc-55cc-49ee-bddb-1b6d4aaaaac6
2024-09-18 01:16:53.535 [info] CPP Request Log with id ce2b19bc-55cc-49ee-bddb-1b6d4aaaaac6
2024-09-18 01:16:53.535 [info] =======>Model input 
2024-09-18 01:16:53.535 [info] =======>Model output 
    public boolean logout() {
        System.out.println("#=---- Logging Out ----=#");
        return true;
    }
2024-09-18 01:16:53.535 [info] =======>Debug stream time 138.88921599835157
2024-09-18 01:16:53.535 [info] =======>Debug ttft time 134.8779690042138
2024-09-18 01:16:53.537 [info] Average of latest 20 ttft time 127.03983880002052
2024-09-18 01:16:53.537 [info] Average of latest 20 stream time 143.90713240075857
2024-09-18 01:16:53.537 [info] Average of latest 20 total time NaN
2024-09-18 01:16:53.537 [info] Average of latest 20 client time 544.767529296875
2024-09-18 01:16:53.537 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:16:53.537 [info] CPP RT LOG: All stats {"streamingtime":833.23828125,"actualTtftFromStart":885.194580078125,"timeTillServerRequest":55.3837890625,"requestToTtft":829.810791015625,"totalTime":888.59326171875}
2024-09-18 01:16:53.537 [info] CURSOR LOG: restFunc done ce2b19bc-55cc-49ee-bddb-1b6d4aaaaac6
2024-09-18 01:17:05.218 [info] CURSOR LOG: restFunc initiated b870ddca-b567-4805-b671-6c68af541a71
2024-09-18 01:17:05.755 [info] CURSOR LOG: Done streaming cpp with id b870ddca-b567-4805-b671-6c68af541a71
2024-09-18 01:17:05.755 [info] CPP RT LOG: Time taken for streaming cpp 536.922119140625 with request b870ddca-b567-4805-b671-6c68af541a71
2024-09-18 01:17:05.755 [info] CPP Request Log with id b870ddca-b567-4805-b671-6c68af541a71
2024-09-18 01:17:05.755 [info] =======>Model input 
2024-09-18 01:17:05.755 [info] =======>Model output 
            if (professor != null) {
                professor.addAssignedCourse(course);
                course.assignProfessor(professor);
            }
2024-09-18 01:17:05.755 [info] =======>Debug stream time 176.58774899691343
2024-09-18 01:17:05.755 [info] =======>Debug ttft time 172.11646499484777
2024-09-18 01:17:05.756 [info] Average of latest 20 ttft time 127.02003344986588
2024-09-18 01:17:05.756 [info] Average of latest 20 stream time 143.77092055063696
2024-09-18 01:17:05.756 [info] Average of latest 20 total time NaN
2024-09-18 01:17:05.756 [info] Average of latest 20 client time 542.566455078125
2024-09-18 01:17:05.756 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:17:05.756 [info] CPP RT LOG: All stats {"streamingtime":536.922119140625,"actualTtftFromStart":602.512939453125,"timeTillServerRequest":65.77001953125,"requestToTtft":536.742919921875,"totalTime":602.659912109375}
2024-09-18 01:17:05.756 [info] CURSOR LOG: restFunc done b870ddca-b567-4805-b671-6c68af541a71
2024-09-18 01:17:39.664 [info] CURSOR LOG: restFunc initiated b94bf82f-7954-4a19-8c24-544fe3437f49
2024-09-18 01:17:40.237 [info] CURSOR LOG: Done streaming cpp with id b94bf82f-7954-4a19-8c24-544fe3437f49
2024-09-18 01:17:40.237 [info] CPP RT LOG: Time taken for streaming cpp 573.280029296875 with request b94bf82f-7954-4a19-8c24-544fe3437f49
2024-09-18 01:17:40.237 [info] CPP Request Log with id b94bf82f-7954-4a19-8c24-544fe3437f49
2024-09-18 01:17:40.237 [info] =======>Model input 
2024-09-18 01:17:40.237 [info] =======>Model output 
            System.out.println("9. Logout");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
2024-09-18 01:17:40.237 [info] =======>Debug stream time 178.0089199990034
2024-09-18 01:17:40.237 [info] =======>Debug ttft time 175.22015500068665
2024-09-18 01:17:40.238 [info] Average of latest 20 ttft time 127.78733905013651
2024-09-18 01:17:40.238 [info] Average of latest 20 stream time 144.34178010057659
2024-09-18 01:17:40.238 [info] Average of latest 20 total time NaN
2024-09-18 01:17:40.238 [info] Average of latest 20 client time 544.5669067382812
2024-09-18 01:17:40.238 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:17:40.238 [info] CPP RT LOG: All stats {"streamingtime":573.280029296875,"actualTtftFromStart":648.298583984375,"timeTillServerRequest":75.411376953125,"requestToTtft":572.88720703125,"totalTime":648.656005859375}
2024-09-18 01:17:40.238 [info] CURSOR LOG: restFunc done b94bf82f-7954-4a19-8c24-544fe3437f49
2024-09-18 01:17:52.479 [info] CURSOR LOG: restFunc initiated 08bc1163-48d1-472e-ad33-473981371461
2024-09-18 01:17:53.004 [info] CURSOR LOG: Done streaming cpp with id 08bc1163-48d1-472e-ad33-473981371461
2024-09-18 01:17:53.004 [info] CPP RT LOG: Time taken for streaming cpp 525.63037109375 with request 08bc1163-48d1-472e-ad33-473981371461
2024-09-18 01:17:53.004 [info] CPP Request Log with id 08bc1163-48d1-472e-ad33-473981371461
2024-09-18 01:17:53.004 [info] =======>Model input 
2024-09-18 01:17:53.004 [info] =======>Model output 
                    RESET);
        }
    }
}
2024-09-18 01:17:53.004 [info] =======>Debug stream time 118.90184200555086
2024-09-18 01:17:53.004 [info] =======>Debug ttft time 108.7850970029831
2024-09-18 01:17:53.005 [info] Average of latest 20 ttft time 123.31584575027227
2024-09-18 01:17:53.005 [info] Average of latest 20 stream time 140.14785260073842
2024-09-18 01:17:53.005 [info] Average of latest 20 total time NaN
2024-09-18 01:17:53.005 [info] Average of latest 20 client time 544.4957275390625
2024-09-18 01:17:53.005 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:17:53.005 [info] CPP RT LOG: All stats {"streamingtime":525.63037109375,"actualTtftFromStart":584.24951171875,"timeTillServerRequest":58.70751953125,"requestToTtft":525.5419921875,"totalTime":584.323974609375}
2024-09-18 01:17:53.005 [info] CURSOR LOG: restFunc done 08bc1163-48d1-472e-ad33-473981371461
2024-09-18 01:17:56.633 [info] CURSOR LOG: restFunc initiated e3d5e4cb-94dd-4937-96f6-fbd7eb2ef208
2024-09-18 01:17:57.268 [info] CURSOR LOG: Done streaming cpp with id e3d5e4cb-94dd-4937-96f6-fbd7eb2ef208
2024-09-18 01:17:57.268 [info] CPP RT LOG: Time taken for streaming cpp 635.255126953125 with request e3d5e4cb-94dd-4937-96f6-fbd7eb2ef208
2024-09-18 01:17:57.268 [info] CPP Request Log with id e3d5e4cb-94dd-4937-96f6-fbd7eb2ef208
2024-09-18 01:17:57.268 [info] =======>Model input 
2024-09-18 01:17:57.268 [info] =======>Model output 
                    course.getOfficeHours(),
                    course.getEnrollmentLimit(),
                    RESET);
        }
2024-09-18 01:17:57.268 [info] =======>Debug stream time 149.8438649997115
2024-09-18 01:17:57.268 [info] =======>Debug ttft time 138.9539740011096
2024-09-18 01:17:57.269 [info] Average of latest 20 ttft time 123.77882174998521
2024-09-18 01:17:57.269 [info] Average of latest 20 stream time 140.68538000062108
2024-09-18 01:17:57.269 [info] Average of latest 20 total time NaN
2024-09-18 01:17:57.269 [info] Average of latest 20 client time 537.38837890625
2024-09-18 01:17:57.269 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:17:57.269 [info] CPP RT LOG: All stats {"streamingtime":635.255126953125,"actualTtftFromStart":689.258544921875,"timeTillServerRequest":54.152587890625,"requestToTtft":635.10595703125,"totalTime":689.38525390625}
2024-09-18 01:17:57.269 [info] CURSOR LOG: restFunc done e3d5e4cb-94dd-4937-96f6-fbd7eb2ef208
2024-09-18 01:17:58.148 [info] CURSOR LOG: restFunc initiated aed1960e-5198-4dcc-b48e-c5b714b745dd
2024-09-18 01:17:58.648 [info] CURSOR LOG: Done streaming cpp with id aed1960e-5198-4dcc-b48e-c5b714b745dd
2024-09-18 01:17:58.648 [info] CPP RT LOG: Time taken for streaming cpp 499.7470703125 with request aed1960e-5198-4dcc-b48e-c5b714b745dd
2024-09-18 01:17:58.669 [info] CPP Request Log with id aed1960e-5198-4dcc-b48e-c5b714b745dd
2024-09-18 01:17:58.669 [info] =======>Model input <｜begin▁of▁sentence｜>You are an intelligent programmer named CursorBot. You are an expert at coding. Your goal is to help your colleague finish a code change.

User: Help me finish a coding change. In particular, you will see a series of snippets from files I've recently viewed, the file I am editing, then a history of my recent codebase changes, then current compiler and linter errors. You will then rewrite the <code_to_rewrite>, to match what you think I would do next in the codebase. Note: I might have stopped in the middle of typing.

Here are some snippets of code I've recently looked at, roughly from oldest to newest. It's possible these aren't entirely relevant to my code change.
<recently_viewed_snippets>
<snippet>
(`Professor.java`)


                    break;
                case 2:
                    System.out.println("#=---- Update Course Details ----=#");
                    updateCourseDetails(scanner, courseCatalog);
                    break;
                case 3:
                    System.out.println("#=---- View Syllabus ----=#");
                    viewSyllabus(scanner, courseCatalog);
                    break;
                case 4:
                    System.out.println("#=---- Back to Main Menu ----=#");
                    return;
                default:
                    System.out.println("Invalid selection. Please try again.");
            }
        }
    }

    public void loadAssignedCourses(CourseCatalog courseCatalog) {
        this.assignedCourses = courseCatalog.getCoursesForProfessor(this.getName());
        System.out.println("Loaded " + this.assignedCourses.size() + " courses for professor " + this.getName());
    }

    private void viewAssignedCourses() {
        System.out.println("#=---- View Assigned Courses ----=#");
        if (assignedCourses == null || assignedCourses.isEmpty()) {
            System.out.println("You have no assigned courses.");
        } else {
            System.out.println("Assigned Courses:");
            CourseTable.printCourseTable(assignedCourses);
        }
    }

    private void updateCourseDetails(Scanner scanner, CourseCatalog courseCatalog) {
        viewAssignedCourses(); // Remove the courseCatalog argument here
        System.out.print("Enter the course code to update: ");
        String courseCode = scanner.nextLine();
        
        Course course = assignedCourses.stream()
                .filter(c -> c.getCode().equals(courseCode))
                .findFirst()
                .orElse(null);

        if (course == null) {
            System.out.println("Invalid course code or you are not assigned to this course.");
            return;
        }

</snippet>
</recently_viewed_snippets>


Here is the file that I'm looking at (`Main.java`):
<file>
import java.util.List;
import java.util.Scanner;

import java.util.List;
import java.util.Scanner;

public class Main {
    private static Scanner scanner = new Scanner(System.in);
    private static CourseCatalog courseCatalog = new CourseCatalog();
    private static Credentials credentials = new Credentials();

    private static void print_prbr() throws InterruptedException {
        int total = 100;
        for (int i = 0; i <= total; i++) {
            progressbar.printProgressBar(i, total);
            Thread.sleep(3);
        }
        System.out.println();
    }

    public static void main(String[] args) throws InterruptedException {
        while (true) {
            String menuChoice = login_menu.showMenu(scanner);

            if (menuChoice.equals("Quit")) {
                System.out.println("Exiting the application...");
                break;
            }

            if (menuChoice.equals("Invalid")) {
                continue;
            }

            List<String> creds = login_manager.login(scanner);
            boolean isAuthenticated = credentials.verify(creds.get(0), creds.get(1));

            if (!isAuthenticated) {
                System.out.println("Wrong credentials! Returning to login menu...");
                continue;
            }

            System.out.println("\u001B[32m" + "Correct Credentials! Logging in..." + "\u001B[0m");
            print_prbr();

            switch (menuChoice) {
                case "Student":
                    handleStudentMenu(credentials, creds.get(0), courseCatalog);
                    break;
                case "Professor":
                    handleProfessorMenu(credentials, creds.get(0), courseCatalog);
                    break;
                case "Admin":
                    handleAdminMenu(credentials, creds.get(0), courseCatalog);
                    break;
                default:
                    System.out.println("Invalid role selection. Returning to login menu...");
            }
        }
        scanner.close();
    }


    private static void handleStudentMenu(Credentials credentials, String id, CourseCatalog courseCatalog) {
        List<String> stucreds = credentials.getstucreds(id);
        System.out.println(stucreds.get(0) + " " + stucreds.get(1) + " " + stucreds.get(2) + " " + stucreds.get(3));
        if (stucreds.size() < 4) {
        System.out.println("Error: Insufficient student information.");
            return;
        }
<<<AREA_AROUND_CODE_TO_REWRITE_WILL_BE_INSERTED_HERE>>>
                case 2:
                    student.registerForCourse(scanner, courseCatalog);
                    break;
                case 3:
                    student.viewRegisteredCourses();
                    break;
                case 4:
                    student.viewCompletedCourses();
                    break;
                case 5:
                    student.dropCourse(scanner);
                    break;
                case 6:
                    student.trackProgress();
                    break;
                case 7:
                    student.submitComplaint(scanner);
                    break;
                case 8:
                    student.viewSchedule();
                    break;
                case 9:
                    student.logout();
                    return;
                default:
                    System.out.println("Invalid selection. Please try again.");
            }
        }
    }

    private static void handleProfessorMenu(Credentials credentials, String id, CourseCatalog courseCatalog) {
        List<String> profcreds = credentials.getprofcreds(id);
        Professor professor = new Professor(profcreds.get(0), profcreds.get(1), profcreds.get(2));
        professor.loadAssignedCourses(courseCatalog);  // Make sure this line is present
        System.out.println("Hello " + "\u001B[32m" + profcreds.get(0) + "\u001B[0m");

        while (true) {
            System.out.println("1. Manage Courses");
            System.out.println("2. View Enrolled Students");
            System.out.println("3. Logout");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    professor.manageCourses(scanner, courseCatalog);
                    break;
                case 2:
                    professor.viewEnrolledStudents(scanner, courseCatalog);
                    break;
                case 3:
                    professor.logout();
                    return;
                default:
                    System.out.println("Invalid selection. Please try again.");
            }
        }
    }

    private static void handleAdminMenu(Credentials credentials, String id, CourseCatalog courseCatalog) {
        List<String> admincreds = credentials.getadmincreds(id);
        Admin admin = new Admin(admincreds.get(0), admincreds.get(1), admincreds.get(3));
        System.out.println("Hello " + "\u001B[32m" + admincreds.get(0) + "\u001B[0m");

        while (true) {
            System.out.println("1. Manage Course Catalog");
            System.out.println("2. Manage Student Records");
            System.out.println("3. Assign Professors to Courses");
            System.out.println("4. Handle Complaints");
            System.out.println("5. Logout");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    admin.manageCourses(scanner, courseCatalog);
                    break;
                case 2:
                    admin.manageStudentRecords(scanner, courseCatalog);
                    break;
                case 3:
                    admin.assignProfessorsToCourses(scanner, courseCatalog);
                    break;
                case 4:
                    admin.handleComplaints(scanner, courseCatalog);
                    break;
                case 5:
                    admin.logout();
                    return;
                default:
                    System.out.println("Invalid selection. Please try again.");
            }
        }
    }
}

</file>

Here are some snippets of code I just looked at:
<recently_viewed_snippets>
<snippet>
(`CourseCatalog.java`)


                student.registerForCourse(course);
                course.enrollStudent(student);
            }
        }
    }

    public void dropStudentFromCourse(String studentId, String courseCode) {
        Student student = students.get(studentId);
        Course course = courses.get(courseCode);
        if (student != null && course != null) {
            student.dropCourse(course);
            course.removeStudent(student);
        }
    }

    public void updateComplaintStatus(Complaint complaint, String newStatus) {
        complaint.setStatus(newStatus);
    }

    public List<Complaint> getFilteredComplaints(String status, String date) {
        return complaints.stream()
                .filter(c -> (status == null || c.getStatus().equals(status)) &&
                             (date == null || c.getDate().equals(date)))
                .toList();
    }

    public List<Course> getStudentRegistrations(String studentId) {
        return studentRegistrations.getOrDefault(studentId, new ArrayList<>());
    }

    public List<Course> getProfessorAssignments(String professorId) {
        return professorAssignments.getOrDefault(professorId, new ArrayList<>());
    }

    public List<Student> getEnrolledStudents(String courseCode) {
        Course course = courses.get(courseCode);
        return course != null ? course.getEnrolledStudents() : new ArrayList<>();
    }

    public List<Course> getCoursesForProfessor(String professorName) {
        return courses.values().stream()
                .filter(course -> course.getAssignedProfessor() != null &&
                        course.getAssignedProfessor().getName().equals(professorName))
                .collect(Collectors.toList());
    }

    public List<Course> getAllCourses() {
        return new ArrayList<>(courses.values());
    }
</snippet>
<snippet>
(`CourseTable.java`)


import java.util.List;

public class CourseTable {
    private static final String RESET = "\u001B[0m";
    private static final String BLUE = "\u001B[34m";

    public static void printCourseTable(List<Course> courses) {
        System.out.println("Printing table for " + courses.size() + " courses.");
        System.out.printf("%-10s | %-40s | %-30s | %-10s | %-15s | %-15s | %-20s\n",
                "Code", "Course Name", "Professor", "Credits", "Schedule", "Office Hours", "Enrollment Limit");
        System.out.println("-".repeat(150));

        for (int i = 0; i < courses.size(); i++) {
            Course course = courses.get(i);
            String color = (i % 2 == 0) ? BLUE : RESET;

            System.out.printf("%s%-10s | %-40s | %-30s | %-10d | %-15s | %-15s | %-20d%s\n",
                    color,
                    course.getCode(),
                    course.getTitle(),
                    course.getAssignedProfessor().getName(),
                    course.getCredits(),
                    course.getSchedule(),
                    course.getOfficeHours(),
                    course.getEnrollmentLimit(),
                    RESET);
        }
    }
}
</snippet>
</recently_viewed_snippets>

Here is my recent series of edits from oldest to newest.
<diff_history>
CourseCatalog.java
22-|        // Add your course initialization logic here
23-|        // Example:
24-|        addCourse(new Course("CSE101", "Introduction to Programming", 4, 1, "John Doe", null, 100, "Mon 10:00-12:00"));
then
19+|        assignCoursesToProfessors();
then
14-|        courses = new HashMap<>();
15-|        students = new HashMap<>();
16-|        professors = new HashMap<>();
17-|        complaints = new ArrayList<>();
14+|        this.courses = new HashMap<>();
15+|        this.students = new HashMap<>();
16+|        this.professors = new HashMap<>();
17+|        this.complaints = new ArrayList<>();
18+|        this.studentRegistrations = new HashMap<>();
19+|        this.professorAssignments = new HashMap<>();
then
12+|    private Map<String, List<Course>> studentRegistrations;
13+|    private Map<String, List<Course>> professorAssignments;
then
6+|import java.util.Random;
Course.java
29-|        this.syllabus = "Default syllabus for " + code;
30-|        this.officeHours = "TBA";
Professor.java
50-|        System.out.println("Assigned Courses:");
51-|        for (Course course : assignedCourses) {
52-|            System.out.println(course.getCode() + " - " + course.getTitle());
50+|        System.out.println("#=---- View Assigned Courses ----=#");
51+|        if (assignedCourses == null || assignedCourses.isEmpty()) {
52+|            System.out.println("You have no assigned courses.");
53+|        } else {
54+|            System.out.println("Assigned Courses:");
55+|            CourseTable.printCourseTable(assignedCourses);
</diff_history>



<area_around_code_to_rewrite>
        Student student = new Student(stucreds.get(0), stucreds.get(1), stucreds.get(2), stucreds.get(3));
        System.out.println("Hello " + "\u001B[32m" + stucreds.get(0) + "\u001B[0m");

        while (true) {
            System.out.println("1. View Available Courses");
            System.out.println("2. Register for a Course");
            System.out.println("3. View Registered Courses");
            System.out.println("4. View Completed Courses");
            System.out.println("5. Drop a Course");
            System.out.println("6. Track Progress");
            System.out.println("7. Submit Complaint");
            System.out.println("8. View Schedule");

<code_to_rewrite>
            System.out.println("9. Logout");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
</code_to_rewrite>

            switch (choice) {
                case 1:
                    student.viewAvailableCourses(scanner, courseCatalog);
                    break;

</area_around_code_to_rewrite>


<diff_history>
Professor.java
46-|        this.assignedCourses = courseCatalog.getCoursesForProfessor(this.getId());
46+|        this.assignedCourses = courseCatalog.getCoursesForProfessor(this.getName());
47+|        System.out.println("Loaded " + this.assignedCourses.size() + " courses for professor " + this.getName());
</diff_history>

Now, continue where I left off and finish my change by rewriting "code_to_rewrite":




Assistant: 
2024-09-18 01:17:58.669 [info] =======>Model output 
            System.out.println("9. Logout");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
2024-09-18 01:17:58.669 [info] =======>Debug stream time 184.00734599679708
2024-09-18 01:17:58.669 [info] =======>Debug ttft time 110.99590799957514
2024-09-18 01:17:58.669 [info] Average of latest 20 ttft time 118.7546617500484
2024-09-18 01:17:58.669 [info] Average of latest 20 stream time 137.72495935037733
2024-09-18 01:17:58.669 [info] Average of latest 20 total time NaN
2024-09-18 01:17:58.669 [info] Average of latest 20 client time 526.97080078125
2024-09-18 01:17:58.669 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:17:58.669 [info] CPP RT LOG: All stats {"streamingtime":499.7470703125,"actualTtftFromStart":484.0888671875,"timeTillServerRequest":55.897216796875,"requestToTtft":428.191650390625,"totalTime":555.629150390625}
2024-09-18 01:17:58.669 [info] CURSOR LOG: restFunc done aed1960e-5198-4dcc-b48e-c5b714b745dd
2024-09-18 01:17:59.018 [info] CURSOR LOG: restFunc initiated eb711a45-a74e-402a-94ef-ebc276408a20
2024-09-18 01:17:59.541 [info] CURSOR LOG: Done streaming cpp with id eb711a45-a74e-402a-94ef-ebc276408a20
2024-09-18 01:17:59.541 [info] CPP RT LOG: Time taken for streaming cpp 523.428466796875 with request eb711a45-a74e-402a-94ef-ebc276408a20
2024-09-18 01:17:59.541 [info] CPP Request Log with id eb711a45-a74e-402a-94ef-ebc276408a20
2024-09-18 01:17:59.541 [info] =======>Model input 
2024-09-18 01:17:59.541 [info] =======>Model output 
            if (professor != null) {
                professor.addAssignedCourse(course);
                course.assignProfessor(professor);
            }
2024-09-18 01:17:59.541 [info] =======>Debug stream time 195.9582910016179
2024-09-18 01:17:59.541 [info] =======>Debug ttft time 182.181644000113
2024-09-18 01:17:59.554 [info] Average of latest 20 ttft time 119.74182374998927
2024-09-18 01:17:59.554 [info] Average of latest 20 stream time 138.94087895043194
2024-09-18 01:17:59.554 [info] Average of latest 20 total time NaN
2024-09-18 01:17:59.554 [info] Average of latest 20 client time 527.6932495117187
2024-09-18 01:17:59.554 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:17:59.554 [info] CPP RT LOG: All stats {"streamingtime":523.428466796875,"actualTtftFromStart":565.415771484375,"timeTillServerRequest":50.58935546875,"requestToTtft":514.826416015625,"totalTime":573.9814453125}
2024-09-18 01:17:59.554 [info] CURSOR LOG: restFunc done eb711a45-a74e-402a-94ef-ebc276408a20
2024-09-18 01:17:59.866 [info] CURSOR LOG: restFunc initiated a2ede8f5-6ed8-4f7d-adc2-5460dd4f1365
2024-09-18 01:18:00.616 [info] CURSOR LOG: Done streaming cpp with id a2ede8f5-6ed8-4f7d-adc2-5460dd4f1365
2024-09-18 01:18:00.616 [info] CPP RT LOG: Time taken for streaming cpp 749.964599609375 with request a2ede8f5-6ed8-4f7d-adc2-5460dd4f1365
2024-09-18 01:18:00.616 [info] CPP Request Log with id a2ede8f5-6ed8-4f7d-adc2-5460dd4f1365
2024-09-18 01:18:00.616 [info] =======>Model input 
2024-09-18 01:18:00.616 [info] =======>Model output 
    public boolean logout() {
        System.out.println("#=---- Logging Out ----=#");
        return true;
    }
2024-09-18 01:18:00.616 [info] =======>Debug stream time 266.08988999575377
2024-09-18 01:18:00.616 [info] =======>Debug ttft time 259.3600679934025
2024-09-18 01:18:00.617 [info] Average of latest 20 ttft time 125.39896334968508
2024-09-18 01:18:00.617 [info] Average of latest 20 stream time 136.5750936500728
2024-09-18 01:18:00.617 [info] Average of latest 20 total time NaN
2024-09-18 01:18:00.617 [info] Average of latest 20 client time 533.74599609375
2024-09-18 01:18:00.617 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:18:00.617 [info] CPP RT LOG: All stats {"streamingtime":749.964599609375,"actualTtftFromStart":801.425537109375,"timeTillServerRequest":51.74072265625,"requestToTtft":749.684814453125,"totalTime":801.6748046875}
2024-09-18 01:18:00.617 [info] CURSOR LOG: restFunc done a2ede8f5-6ed8-4f7d-adc2-5460dd4f1365
2024-09-18 01:18:00.713 [info] CURSOR LOG: restFunc initiated 13b01e4e-4aa1-44de-ba5c-3ce14570945e
2024-09-18 01:18:01.214 [info] CURSOR LOG: Done streaming cpp with id 13b01e4e-4aa1-44de-ba5c-3ce14570945e
2024-09-18 01:18:01.214 [info] CPP RT LOG: Time taken for streaming cpp 501.80859375 with request 13b01e4e-4aa1-44de-ba5c-3ce14570945e
2024-09-18 01:18:01.214 [info] CPP Request Log with id 13b01e4e-4aa1-44de-ba5c-3ce14570945e
2024-09-18 01:18:01.215 [info] =======>Model input 
2024-09-18 01:18:01.215 [info] =======>Model output 
    }

    @Override
    public String toString() {
2024-09-18 01:18:01.215 [info] =======>Debug stream time 120.40257599949837
2024-09-18 01:18:01.215 [info] =======>Debug ttft time 109.2606890052557
2024-09-18 01:18:01.215 [info] Average of latest 20 ttft time 124.30155230015517
2024-09-18 01:18:01.215 [info] Average of latest 20 stream time 135.85808980017902
2024-09-18 01:18:01.215 [info] Average of latest 20 total time NaN
2024-09-18 01:18:01.215 [info] Average of latest 20 client time 534.2926635742188
2024-09-18 01:18:01.215 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:18:01.215 [info] CPP RT LOG: All stats {"streamingtime":501.80859375,"actualTtftFromStart":560.525146484375,"timeTillServerRequest":58.99755859375,"requestToTtft":501.527587890625,"totalTime":560.7626953125}
2024-09-18 01:18:01.215 [info] CURSOR LOG: restFunc done 13b01e4e-4aa1-44de-ba5c-3ce14570945e
2024-09-18 01:22:16.185 [info] CURSOR LOG: restFunc initiated 2736b74a-46dc-440a-bfd6-fcd375f3bbb2
2024-09-18 01:22:17.697 [info] CURSOR LOG: Done streaming cpp with id 2736b74a-46dc-440a-bfd6-fcd375f3bbb2
2024-09-18 01:22:17.697 [info] CPP RT LOG: Time taken for streaming cpp 1512.849609375 with request 2736b74a-46dc-440a-bfd6-fcd375f3bbb2
2024-09-18 01:22:17.697 [info] CPP Request Log with id 2736b74a-46dc-440a-bfd6-fcd375f3bbb2
2024-09-18 01:22:17.697 [info] =======>Model input 
2024-09-18 01:22:17.697 [info] =======>Model output 
            System.out.println("9. Logout");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
2024-09-18 01:22:17.697 [info] =======>Debug stream time 349.70451099425554
2024-09-18 01:22:17.697 [info] =======>Debug ttft time 327.5936149954796
2024-09-18 01:22:17.698 [info] Average of latest 20 ttft time 134.94543234966696
2024-09-18 01:22:17.698 [info] Average of latest 20 stream time 147.2277375996113
2024-09-18 01:22:17.698 [info] Average of latest 20 total time NaN
2024-09-18 01:22:17.698 [info] Average of latest 20 client time 585.7348022460938
2024-09-18 01:22:17.698 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:22:17.698 [info] CPP RT LOG: All stats {"streamingtime":1512.849609375,"actualTtftFromStart":1564.990234375,"timeTillServerRequest":52.334228515625,"requestToTtft":1512.656005859375,"totalTime":1565.160400390625}
2024-09-18 01:22:17.698 [info] CURSOR LOG: restFunc done 2736b74a-46dc-440a-bfd6-fcd375f3bbb2
2024-09-18 01:22:26.068 [info] CURSOR LOG: restFunc initiated 60d7111f-8704-42dc-a667-436f422fd71c
2024-09-18 01:22:26.491 [info] CURSOR LOG: Done streaming cpp with id 60d7111f-8704-42dc-a667-436f422fd71c
2024-09-18 01:22:26.492 [info] CPP RT LOG: Time taken for streaming cpp 422.82666015625 with request 60d7111f-8704-42dc-a667-436f422fd71c
2024-09-18 01:22:26.492 [info] CPP Request Log with id 60d7111f-8704-42dc-a667-436f422fd71c
2024-09-18 01:22:26.492 [info] =======>Model input 
2024-09-18 01:22:26.492 [info] =======>Model output 
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
2024-09-18 01:22:26.492 [info] =======>Debug stream time 101.41956499963999
2024-09-18 01:22:26.492 [info] =======>Debug ttft time 93.47591600567102
2024-09-18 01:22:26.544 [info] Average of latest 20 ttft time 134.6438998002559
2024-09-18 01:22:26.544 [info] Average of latest 20 stream time 147.0580485995859
2024-09-18 01:22:26.544 [info] Average of latest 20 total time NaN
2024-09-18 01:22:26.544 [info] Average of latest 20 client time 586.0783081054688
2024-09-18 01:22:26.544 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:22:26.544 [info] CPP RT LOG: All stats {"streamingtime":422.82666015625,"actualTtftFromStart":467.207763671875,"timeTillServerRequest":51.011474609375,"requestToTtft":416.1962890625,"totalTime":473.81591796875}
2024-09-18 01:22:26.544 [info] CURSOR LOG: restFunc done 60d7111f-8704-42dc-a667-436f422fd71c
2024-09-18 01:22:42.693 [info] CURSOR LOG: restFunc initiated 9df2eae7-77ea-460a-9bde-a6f9e9f700f0
2024-09-18 01:22:43.161 [info] CURSOR LOG: Done streaming cpp with id 9df2eae7-77ea-460a-9bde-a6f9e9f700f0
2024-09-18 01:22:43.161 [info] CPP RT LOG: Time taken for streaming cpp 468.0322265625 with request 9df2eae7-77ea-460a-9bde-a6f9e9f700f0
2024-09-18 01:22:43.162 [info] CPP Request Log with id 9df2eae7-77ea-460a-9bde-a6f9e9f700f0
2024-09-18 01:22:43.162 [info] =======>Model input 
2024-09-18 01:22:43.162 [info] =======>Model output 
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
2024-09-18 01:22:43.162 [info] =======>Debug stream time 123.4753330051899
2024-09-18 01:22:43.162 [info] =======>Debug ttft time 117.77496600151062
2024-09-18 01:22:43.163 [info] Average of latest 20 ttft time 135.04576725028454
2024-09-18 01:22:43.163 [info] Average of latest 20 stream time 147.479635649547
2024-09-18 01:22:43.163 [info] Average of latest 20 total time NaN
2024-09-18 01:22:43.163 [info] Average of latest 20 client time 582.5791015625
2024-09-18 01:22:43.163 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:22:43.163 [info] CPP RT LOG: All stats {"streamingtime":468.0322265625,"actualTtftFromStart":522.286376953125,"timeTillServerRequest":59.544921875,"requestToTtft":462.741455078125,"totalTime":527.544921875}
2024-09-18 01:22:43.163 [info] CURSOR LOG: restFunc done 9df2eae7-77ea-460a-9bde-a6f9e9f700f0
2024-09-18 01:22:50.006 [info] CURSOR LOG: restFunc initiated 1157aae4-297f-42ee-920d-58bb313a8ac8
2024-09-18 01:22:50.595 [info] CURSOR LOG: Done streaming cpp with id 1157aae4-297f-42ee-920d-58bb313a8ac8
2024-09-18 01:22:50.596 [info] CPP RT LOG: Time taken for streaming cpp 588.305908203125 with request 1157aae4-297f-42ee-920d-58bb313a8ac8
2024-09-18 01:22:50.596 [info] CPP Request Log with id 1157aae4-297f-42ee-920d-58bb313a8ac8
2024-09-18 01:22:50.596 [info] =======>Model input 
2024-09-18 01:22:50.596 [info] =======>Model output 
}

2024-09-18 01:22:50.596 [info] =======>Debug stream time 127.16306199878454
2024-09-18 01:22:50.596 [info] =======>Debug ttft time 124.51111599802971
2024-09-18 01:22:50.597 [info] Average of latest 20 ttft time 137.01924935020506
2024-09-18 01:22:50.597 [info] Average of latest 20 stream time 149.08507379963993
2024-09-18 01:22:50.597 [info] Average of latest 20 total time NaN
2024-09-18 01:22:50.597 [info] Average of latest 20 client time 591.7770751953125
2024-09-18 01:22:50.597 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:22:50.597 [info] CPP RT LOG: All stats {"streamingtime":588.305908203125,"actualTtftFromStart":638.7099609375,"timeTillServerRequest":50.62158203125,"requestToTtft":588.08837890625,"totalTime":638.912841796875}
2024-09-18 01:22:50.597 [info] CURSOR LOG: restFunc done 1157aae4-297f-42ee-920d-58bb313a8ac8
2024-09-18 01:22:51.340 [info] CURSOR LOG: restFunc initiated 39869950-bf8e-410f-a76b-63d62de23e8d
2024-09-18 01:22:51.759 [info] CURSOR LOG: Done streaming cpp with id 39869950-bf8e-410f-a76b-63d62de23e8d
2024-09-18 01:22:51.760 [info] CPP RT LOG: Time taken for streaming cpp 418.854736328125 with request 39869950-bf8e-410f-a76b-63d62de23e8d
2024-09-18 01:22:51.760 [info] CPP Request Log with id 39869950-bf8e-410f-a76b-63d62de23e8d
2024-09-18 01:22:51.760 [info] =======>Model input 
2024-09-18 01:22:51.760 [info] =======>Model output 
            switch (choice) {
                case 1:
                    admin.manageCourses(scanner, courseCatalog);
                    break;
2024-09-18 01:22:51.760 [info] =======>Debug stream time 96.25374300032854
2024-09-18 01:22:51.760 [info] =======>Debug ttft time 89.63079600036144
2024-09-18 01:22:51.760 [info] Average of latest 20 ttft time 136.8611629500985
2024-09-18 01:22:51.760 [info] Average of latest 20 stream time 148.29496429972352
2024-09-18 01:22:51.760 [info] Average of latest 20 total time NaN
2024-09-18 01:22:51.760 [info] Average of latest 20 client time 588.8738647460938
2024-09-18 01:22:51.760 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:22:51.760 [info] CPP RT LOG: All stats {"streamingtime":418.854736328125,"actualTtftFromStart":459.5,"timeTillServerRequest":51.57275390625,"requestToTtft":407.92724609375,"totalTime":470.40771484375}
2024-09-18 01:22:51.760 [info] CURSOR LOG: restFunc done 39869950-bf8e-410f-a76b-63d62de23e8d
2024-09-18 01:27:43.609 [info] CURSOR LOG: restFunc initiated 933e3e58-46cf-4e78-ad45-0bff6331273f
2024-09-18 01:27:44.411 [info] CURSOR LOG: restFunc initiated 3be741d7-9367-4a91-a514-1891f64bf02c
2024-09-18 01:27:44.891 [info] CURSOR LOG: Done streaming cpp with id 933e3e58-46cf-4e78-ad45-0bff6331273f
2024-09-18 01:27:44.891 [info] CPP RT LOG: Time taken for streaming cpp 1280.853271484375 with request 933e3e58-46cf-4e78-ad45-0bff6331273f
2024-09-18 01:27:44.891 [info] CPP Request Log with id 933e3e58-46cf-4e78-ad45-0bff6331273f
2024-09-18 01:27:44.891 [info] =======>Model input 
2024-09-18 01:27:44.891 [info] =======>Model output 
        List<String> admincreds = credentials.getadmincreds(id);
        Admin admin = new Admin(admincreds.get(0), admincreds.get(1), admincreds.get(2));
        System.out.println("Hello " + "\u001B[32m" + admincreds.get(0) + "\u001B[0m");

2024-09-18 01:27:44.891 [info] =======>Debug stream time 264.11826000362635
2024-09-18 01:27:44.891 [info] =======>Debug ttft time 149.26332300156355
2024-09-18 01:27:44.891 [info] Average of latest 20 ttft time 140.72158390022815
2024-09-18 01:27:44.891 [info] Average of latest 20 stream time 157.49577214978635
2024-09-18 01:27:44.891 [info] Average of latest 20 total time NaN
2024-09-18 01:27:44.891 [info] Average of latest 20 client time 630.1141479492187
2024-09-18 01:27:44.891 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:27:44.891 [info] CPP RT LOG: All stats {"streamingtime":1280.853271484375,"actualTtftFromStart":1302.730712890625,"timeTillServerRequest":51.08251953125,"requestToTtft":1251.648193359375,"totalTime":1331.92041015625}
2024-09-18 01:27:44.891 [info] CURSOR LOG: restFunc done 933e3e58-46cf-4e78-ad45-0bff6331273f
2024-09-18 01:27:45.206 [info] CURSOR LOG: Done streaming cpp with id 3be741d7-9367-4a91-a514-1891f64bf02c
2024-09-18 01:27:45.206 [info] CPP RT LOG: Time taken for streaming cpp 796.452392578125 with request 3be741d7-9367-4a91-a514-1891f64bf02c
2024-09-18 01:27:45.206 [info] CPP Request Log with id 3be741d7-9367-4a91-a514-1891f64bf02c
2024-09-18 01:27:45.206 [info] =======>Model input 
2024-09-18 01:27:45.206 [info] =======>Model output 
        List<String> admincreds = credentials.getadmincreds(id);
        Admin admin = new Admin(admincreds.get(0), admincreds.get(1), admincreds.get(2));
        System.out.println("Hello " + "\u001B[32m" + admincreds.get(0) + "\u001B[0m");

2024-09-18 01:27:45.206 [info] =======>Debug stream time 173.59191600233316
2024-09-18 01:27:45.206 [info] =======>Debug ttft time 161.7913470044732
2024-09-18 01:27:45.207 [info] Average of latest 20 ttft time 143.61875500045716
2024-09-18 01:27:45.207 [info] Average of latest 20 stream time 160.39580729976296
2024-09-18 01:27:45.207 [info] Average of latest 20 total time NaN
2024-09-18 01:27:45.207 [info] Average of latest 20 client time 647.8925415039063
2024-09-18 01:27:45.207 [info] Average of latest 20 discrepencies NaN
2024-09-18 01:27:45.207 [info] CPP RT LOG: All stats {"streamingtime":796.452392578125,"actualTtftFromStart":849.64599609375,"timeTillServerRequest":53.41064453125,"requestToTtft":796.2353515625,"totalTime":849.819580078125}
2024-09-18 01:27:45.207 [info] CURSOR LOG: restFunc done 3be741d7-9367-4a91-a514-1891f64bf02c
